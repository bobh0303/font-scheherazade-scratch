////////////////////////////////////////////////////////////////////////////////////////////
//
//	File: Scheherazade.gdl
//
//	Main Graphite code file for Scheherazade, including all rules.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
	This file is part of Scheherazade font family 
	(http://scripts.sil.org/Scheherazade) and is 
	Copyright (c) 1994-2014 SIL International (http://www.sil.org/),
	with Reserved Font Names "Scheherazade" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/


#include "stddef.gdh"
AutoPseudo = 0;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;
Bidi = true;

environment {MUnits=2048};

// Temporary until incorporated into stddef.h:
#define DIR_NSM 16		// not defined in stddef.h but is in the compiler
#define DIR_LRI 17		// These 4 new to Unicode 6.3
#define DIR_RLI 18
#define DIR_FSI 19
#define DIR_PDI 20

#if 0   // DESIGN NOTES

One of the complex issues is mark attachment. Problems stem from the following issues:

1) Do we require marks to be in a particular order?
	The typical sequence of marks is shadda or hamza, followed by vowel, followed by quranic mark.
	Windows Arabic uses this order, but a canonical Unicode string will not always be in this order.
	Further, non-canonical Unicode strings can have the marks in any order.
	Decision: We need to support any order.

2) Do we visually identify illogical mark sequences?
	While the order of the marks on a given base is variable, certain marks should not occur
	simultaneously. For example, no more than one vowel mark should occur. If two vowels occur on 
	the same base, we can visually identify this error by inserting a dotted circle between them
	which will then act as a base for the second vowel.
	But detecting this if we allow any order vowels (see 1) is a bit tricky. 
	Decision: We want to provide this valuable feedback. 

3) Exactly what marks are mutually exclusive? Seems clear that the vowels (e.g kasra, fatha, damma,
	kasratan, fathatan, dammatan, sukun) are mutually exclusive with each other. For Arabic
	shadda, hamza above, hamza below, and maddah are also mutually exclusive, but I don't know about
	other languages. I also don't know about the remaining (i.e., quranic) marks.
	Decision: assume shadda, hamza a/b, maddah and mark noon ghunna are mutually exclusive, and vowel
	marks are mutually exclusive.
	
4) However, maddah works differently from shadda and hamza
	in that it is placed above the vowel rather than below. (For example, superscript alef + maddah)

To accomplish all this, the design we use is to reorder the marks to a logical
order based on 4 classes:
	cMark1 class contains shadda, hamza, mark noon ghunna
	cMark2 class contains the vowels
	cMark3 class contains maddah
	cMark4 class contains quranic marks and Rohingya tones
	
Only cMark2 and cMark4 can have duplicates. Except right now there are no outer attachment points for the
quranic marks, so multiples don't work right.


#endif

// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

// Hard-coded glyph and class definitions:
#include "SchGlyphs.gdh"

// Features 
#include "SchFeatures.gdh"


#define alefAttached user1

#ifndef opt2
#define opt(x)      [x]?
#define opt2(x)     [opt(x) x]?
#define opt3(x)     [opt2(x) x]?
#define opt4(x)     [opt3(x) x]?
#endif


// Now add additional classes we need:

table(glyph)

	cShaddaKasraLigatures {
		component.shadda = box(bb.left, bb.bottom, bb.right, bb.bottom + bb.height/2);
		component.kasra  = box(bb.left, bb.bottom + bb.height/2, bb.right, bb.top)
	};

endtable; // glyph

// Allow a sequence of up to 4 marks.
#define MARKS [ cAnyMarks [ cAnyMarks [ cAnyMarks cAnyMarks? ]? ]? ]?

#define MARKSBELOW [ cAnyMarksBelow [ cAnyMarksBelow cAnyMarksBelow? ]? ]?

#define MARKSABOVE [ cAnyMarksAbove [ cAnyMarksAbove cAnyMarksAbove? ]? ]?


//-- Substitution ---

table(substitution)

pass(1) {Direction = LEFT_TO_RIGHT}	// Encoding, decomposition, mirroring

	
	// NB: This pass also includes cp1252 compositions
	
	// NB: I think that even though this is an ABS decomposition, it can be done in a LTR pass because
	//     the reverser will make sure the mark always follows the base:
	// QUESTION: are there more things that need to be decomposed?
	cAlefPlusMark _ >  g_alef_ar:1  cAlefMark$1:1 ;
	
//	if (graphite1mirror)    // No longer support Graphite 1 mirroring?
//		(cMirrorOpen cMirrorClose)  >  (cMirrorClose cMirrorOpen);
//	endif;
	
	// The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
	// The string "RenderingUnknown" will be rendered as "RenderingGraphite":
	
	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               > 
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  / 
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

	// Subtending marks
	// This is in a LTR pass because they are category (AN) and the digits that follow are collected into
	// a LTR sequence by the bidi algorithm.
	
	cSignTakes4 cDigitsAny cDigitsAny cDigitsAny cDigitsAny  >
		cSign4 cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Medium cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Medium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;
		
	cSignTakes3Small cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Small cDigitsAnySmall cDigitsAnySmall cDigitsAnySmall;
		
	cSignTakes2 cDigitsAny cDigitsAny  >
		cSign2 cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes1 cDigitsAny  >  cSign1  cDigitsAnyMedium;
	
endpass; // 1


pass(2) {MaxRuleLoop = 10}

	// Simulation of UTR53 - mark reordering
	
	// Notes:
	// 1) We don't swap the glyphs, because that would mess up the original order,
	//    rather we delete and insert.
	// 2) glyphs for fixed-position combining classes (other than shadda and daggeralef)
	//    won't be ordered correctly relative to each other, but usually not more than one anyway.

	_  cUTR53_1_skip=S  cUTR53_1=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_1_skip)  _; // move 220 MCM to front
	_  cUTR53_2_skip=S  cUTR53_2=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_2_skip)  _; // move 230 MCM to just after 220 MCM
	_  cUTR53_3_skip=S  cUTR53_3=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_3_ctx)   _; // shadda is next
	_  cUTR53_4_skip=S  cUTR53_4=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_4_ctx)   _; // other fixed position glyphs (except daggeralef)
	_  cUTR53_5_skip=S  cUTR53_5=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_5_ctx)   _; // daggeralef
	_  cUTR53_6_skip=S  cUTR53_6=M  > @M:M  @S  _ /  ^  _  _  opt4(cUTR53_6_skip)  _; // other 220 in front of remaining 230.

endpass; // 2


pass(3)	// ligature diacritics

if (shaddaKasra == std || shaddaKasra == raised)
		g_shadda_ar  cShaddaKasraMarks  >  _  cShaddaKasraLigatures:(S K)  /  _=S  g_graphemejoinercomb?  _=K;
		cShaddaKasraMarks  g_shadda_ar  >  cShaddaKasraLigatures:(K S)  _  /  _=K  g_graphemejoinercomb?  _=S;
endif;

	
	// QUESTION: do we really need these if we're doing the reordering above?
	// TODO: if we use them, make them into real ligatures
	//absShadda     cShaddaMarks >  _  cShaddaLigatures:(1 2);
	//absHamzaAbove cHamzaMarks  >   _ cHamzaLigatures:(1 2);

endpass; // 3


pass(4)	// Contextual forms, lam-alef ligature, subtending marks

	// Lam-alef
	
	// Here is JK's elegant solution to contextual forms using a ligature glyph...
/***
	(absLam absLamFin)=L  absAlef=A  > 
		(absLamAlef absLamAlefFin):(L A) {component {lam.ref = @L; alef.ref=@A } } gAlefPlaceholder
		/ _  MARKS  _  MARKS ^;
***/
	// ...but we're using two separate glyphs, because of all the combinations.
	cLamIso cAlefIso  >  cLamIniPreAlef {alefAttached = false}  cAlefFinPostLamIni  / _ MARKS ^ _ ;
	cLamFin cAlefIso  >  cLamMedPreAlef {alefAttached = false}  cAlefFinPostLamMed  / _ MARKS ^ _ ;

	// All other contextual forms
	
	(cDualLinkIsol cDualLinkFina g_kashida_ar g_zerowidthjoiner) (cDualLinkIsol cRightLinkIsol g_kashida_ar g_zerowidthjoiner)
		> (cDualLinkInit cDualLinkMedi g_kashida_ar g_zerowidthjoiner) (cDualLinkFina cRightLinkFina g_kashida_ar g_zerowidthjoiner)
		/ _  MARKS ^ _ ;

endpass; // 4


pass(5)	// Features, special behaviors

	cLowHamzaBase  g_hamzaabove_ar  >  cLowHamzaComposed:(1 2)  _;
	
	// Allah ligatures:
	// Also see pass 6 below.

	// Rule 3:
	
	// alefIso-lam-lam-heh
	g_alef_ar  g_lam_ar_init  g_lam_ar_medi  _  _  (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_alef_ar_allah  g_lam_ar_init_allah1  g_lam_ar_medi_allah2=L  g_shadda_ar:L  g_alefabove_ar:L  (g_heh_ar_fina_allah g_hehgoal_ar_fina_allah) 
		/ _ MARKS _ _ _ _ _;

	// Rule 2:

	// lamInit-lam-shadda-alef-heh
	g_lam_ar_init  g_lam_ar_medi  (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_init_allah1  g_lam_ar_medi_allah2  (g_heh_ar_fina_allah g_hehgoal_ar_fina_allah)
		/ (cRightLinkIsol cRightLinkFina) MARKS _ _ g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lamInit-lam-alef-shadda-heh
	g_lam_ar_init  g_lam_ar_medi  (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_init_allah1  g_lam_ar_medi_allah2  (g_heh_ar_fina_allah g_hehgoal_ar_fina_allah)
		/ (cRightLinkIsol cRightLinkFina) MARKS _ _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;

	// lamMedi-lam-shadda-alef-heh
	g_lam_ar_medi g_lam_ar_medi  (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_medi_allah1  g_lam_ar_medi_allah2  (g_heh_ar_fina_allah g_hehgoal_ar_fina_allah)
		/ (cDualLinkInit cDualLinkMedi) MARKS _ _ g_shadda_ar (g_alefabove_ar g_fatha_ar) _;

	// lamMedi-lam-alef-shadda-heh
	g_lam_ar_medi g_lam_ar_medi  (g_heh_ar_fina g_hehgoal_ar_fina) 
		> g_lam_ar_medi_allah1  g_lam_ar_medi_allah2  (g_heh_ar_fina_allah g_hehgoal_ar_fina_allah)
		/ (cDualLinkInit cDualLinkMedi) MARKS _ _ (g_alefabove_ar g_fatha_ar) g_shadda_ar _;
	
	// Features

	if (dalAlt == senegal)
		cDalIso  >  cDalIso_sen;
	endif;
	
	if (meemAlt == sindhi)
		cMeem  >  cMeem_sindhi;
	endif;
	
	if (hehAlt == kurdish)
		cno_Heh  >  cHehKurdish;
	endif;
	if (hehAlt == sindhi)
		cno_Heh  >  cHehSindhi;
	endif;
	if (hehAlt == urdu)
		cno_Heh  >  cHehUrdu;
	endif;

// obsolete
//	if (UAlt == filled)
//		cU  >  cU_filled;
//	endif;

	if (kirghizOeAlt == bar)
		(g_kirghizoe_ar  g_kirghizoe_ar_fina)  >  (g_kirghizoe_ar_bar  g_kirghizoe_ar_fina_bar);
	endif;

	if (yehHamzaAlt == kirghiz)
		(g_yeh_hamzaabove_ar  g_yeh_hamzaabove_ar_fina)  >  (g_yeh_hamzaabove_ar_locl_k_i_r  g_yeh_hamzaabove_ar_fina_locl_k_i_r);
	endif;

	if (maddahAlt != large)
		cMaddah > cMaddah_small;
	endif;
	
	if (dammaAlt == filled)
		cDamma > cDamma_filled;
	endif;
	if (dammaAlt == short)
		cDamma > cDamma_short;
	endif;

	if (dammatanAlt == sixNine)
		cDammatan > cDammatan_sixNine;
	endif;

	if (daggeralefAlt == large)
		g_alefabove_ar  >  g_alefabove_ar_large  /  cTakesLargeDaggerAlef  _;
	endif;
	// daggeralefAlt == 2 -> remains small

	if (ultapeshAlt == hollow)
		g_dammainverted_ar > g_dammainverted_ar_open;
	endif;
	if (ultapeshAlt == filled)
	  g_dammainverted_ar_open > g_dammainverted_ar;  // needed for Wolof, with default = hollow
	endif;

	if (sukunAlt == jasmDown)
		cno_Sukun  >  cSukunDownOpen;
	endif;
	if (sukunAlt == jasmLeft)
		cno_Sukun  >  cSukunLeftOpen;
	endif;
	
	if (endOfAyah == circle)
		cEndOfAyah  >  cEndOfAyahCircle;
	endif;
	if (endOfAyah == square)
		cEndOfAyah  >  cEndOfAyahSquare;
	endif;
	
		
	if (easternDigits == sindhi)
		cEasternDigit  >  cEasternDigitSindhi;
	endif;
	if (easternDigits == urdu)
		cEasternDigit  >  cEasternDigitUrdu;
	endif;
	if (easternDigits == rohingya)
		cEasternDigit  >  cEasternDigitRohingya;
	endif;
	
	if (commaAlt == down)
		cno_Downward  >  cDownward;
	endif;
	
/*--- OBSOLETE FEATURES ---
	if (jehHack == dotHat)
		cJeh > cJeh_dotHat;
	endif;
	
	if (headOfKhahHack == openLeft)
		cno_OpenLeft > cOpenLeft;	endif;
-------------------------*/
	
	//if (!invis) // always true now that we have disabled the feature
	
		// Note that substitution changes the directionality to the defaults for the
		// substituted glyph. :-( So be sure to fix it:
		cInvisible > g_zerowidthspace {directionality = @1.directionality};
		
	//endif; 
	
endpass; // 5


pass(6)
	// Allah clean-up.
	(g_alef_ar  g_alef_ar_fina)                >  (g_alef_ar_allah g_alef_ar_fina_allah)          /  _  MARKS  g_lam_ar_init_allah1;
	(g_alef_wasla_ar g_alef_wasla_ar_fina)  _  >  (g_alef_ar_allah g_alef_ar_fina_allah):1  g__wasla:1 /  _  _ MARKS  g_lam_ar_init_allah1;

	g_shadda_ar  g_alefabove_ar  >  g_shadda_alef_ar:(2 3)  _ /  g_lam_ar_medi_allah2  _  _;

	// Other:
	g_hamzaabove_ar  (g_damma_ar  g_damma_ar_filled  g_damma_ar_short)  
		>  _  (g_hamza_damma_ar  g_hamza_damma_ar_filled  g_hamza_damma_ar_short):(1 2);
endpass;

endtable; // sub


//table(glyph)
//cMark1Below_volt += (g_graphemejoinercomb);
//cMark2Below_volt += (g_graphemejoinercomb);
//cAnyMarksBelow += (g_graphemejoinercomb);
//endtable;

//-- Positioning ---

table (positioning)

// Must allow for at least cMark1Below and/or cMark2Below to intervene between base and marks above.
// The code below is more general.

pass(1)

	// Lam-alef components:
	cHasExit=L {alefAttached = true}  cHasEntry=A {attach {to=@L; at=exitS; with=entryS}; insert=true}
		/ ^ _ {alefAttached == false}  MARKS  _;
	
	// Mark attachment

	// Note: the superscript-alef may have both the _alef and _diaA att pts; the ordering of these
	// rules assumes the alef AP should be used if there are no intervening marks.
	cHasAlefAP=B  cMarkSuperscriptAlefs {attach {to=@B; at=alefS; with=alefM}; insert = true}  / _ ^ MARKSBELOW _ ;
	
/****
	// Special case: cozy up these diacritics a little, so they look more like the built-in ligatures:
	g_shadda_ar=S
		(g_fatha_ar  g_damma_ar  g_fathatan_ar  g_dammatan_ar)
			{attach {to=@S; at=point(diaAS.x,diaAS.y-80m); with=diaAM} }
		/ _ ^ opt4(cndiaADia)  _;

	g_hamzaabove_ar=H
		(g_fatha_ar  g_damma_ar  g_fathatan_ar  g_dammatan_ar)
			{attach {to=@H; at=point(diaAS.x+40m,diaAS.y-80m); with=diaAM} }
		/ _ ^ opt4(cndiaADia)  _;
****/

	calefDia {attach {to = @1; at = alefS; with = alefM}} / cTakesalefDia opt4(cndiaADia) _;
	cdiaADia {attach {to = @1; at = diaAS; with = diaAM}} / cTakesdiaADia opt4(cndiaADia) _;
	cdiaBDia {attach {to = @1; at = diaBS; with = diaBM}} / cTakesdiaBDia opt4(cndiaBDia) _;


	// Normal case - OLD
//	(cBaseAny cMark1Above_volt cMarkSuperscriptAlefs)=B  (cAnyMarksAbove) {attach {to=@B; at=diaAS; with=diaAM} }
//		/ _ ^ MARKSBELOW  _;


	// Subtending marks
	// NB: at this point digits should be in visual order, right to left,
	// so we attach the left-most (logically first) to the sign, and proceed to the right.
	
	
	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign4=S;

	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign3=S;

	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign2=S;

	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSign1=S;
	
	// However, there is a bug in some integrations (e.g., Firefox) 
	// such that the glyps are still in logical order:
	
	cSign4=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D4 { attach {to=@D3; at=digitRS; with=digitLS }; insert = true};
	
	cSign3=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitRS; with=digitLS }; insert = true};
	

	cSign2=S
	cSignDigit=D1 { attach {to=@S;  at=digitRS; with=digitLS }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitRS; with=digitLS }; insert = true};
	

	cSign1=S
	cSignDigit { attach {to=@S;  at=digitRS; with=digitLS }; insert = true};
	
	

endpass; // 1

pass(2)

	// Marks below

	// Special attachment points for lam-alef ligatures, to avoid collisions:
	cAlefFinPostLamAll=B cAnyMarksBelow {attach {to=@B; at=dia2BS; with=dia2BM} }
		/ (g_lam_threedotsabove_ar_init_pre_alef g_lam_threedotsabove_ar_medi_pre_alef cAnyMarksBelow) MARKSABOVE _ ^ MARKSABOVE _ ;

	// Normal case - OLD
//	(cBaseAny cMark1Below_volt)=B  cAnyMarksBelow {attach {to=@B; at=diaBS; with=diaBM} }
//		/ _ ^ MARKSABOVE  _;

endpass; // 2

#ifndef NOKERN
// Start of kerning code

table(glyph)
// debuggers
cNotMA = cRehKernOther;
cNotMA -= cRehKernOtherMA;

cNotMB = cRehKernOther;
cNotMB -= cRehKernOtherMB;
endtable;


if (debug == false)

pass(3)
	// Kerning of reh-like and waw-like

#if (STYLE == BOLD)
	cWawLikeIsol {adv.x +=50m} cRehLikeIsol  /  _ MARKS ^ _;
	cWawLikeFina {adv.x +=50m} cRehLikeIsol  /  _ MARKS ^ _;
#endif
	cRehWawAll cRehWawAll  / _ MARKS ^ _;  // standard spacing is pretty good - don't futz with it.

	// tighten to following gaf-like 
#if (STYLE == BOLD)
	cRehKernKaf {advance.x -= 380m} / cRehWawTighten MARKSBELOW _ ;
#else
	cRehKernKaf {advance.x -= 550m} / cRehWawTighten MARKSBELOW _ ;
#endif
	
	// Loosen from following alef/lam when it has something below it
	g_alef_wavyhamzabelow_ar  {advance.x += 290m}  /  g_reh_ar  MARKS _ MARKS ANY?; // this combination needs a little more
	cAlefLamWBelow {advance.x += 215m} / cRehWawAll MARKS _ ;
	cAlefIso {advance.x += 215m} / cRehWawAll MARKS _ MARKS cAnyMarksBelow ;
	
	// Loosen from following narrow initials with something below
	cNarrowIni {advance.x += 130m} / cRehWawAll MARKS _ MARKS cAnyMarksBelow ;

#if (STYLE == BOLD)
	cTooth2wBelowInit {advance.x += 150m} / cRehWawAll MARKS _ MARKS ;
#endif

	// Leave certain cases alone:
	// Bottom of RW interferes with mark below following:
	(cRehKernAlef cRehKernOther) / cRehWawTighten MARKS                   _ MARKS cAnyMarksBelow ;
	// Mark above RW interferes with mark above following:
	cRehKernOtherMA              / cRehWawTighten MARKS cMarksAbove MARKS _ MARKS cAnyMarksAbove ;

	// Kirghiz-OE (waw-loop) has a different shape from other waw-likes:
	(g_kirghizoe_ar g_kirghizoe_ar_fina) (g_noon_ar g_yehbarree_ar) / _ MARKS _; // don't kern in
	 
	// otherwise tighten against most things
	cRehKernAlef {advance.x -= 190m} / cRehWawTighten MARKSBELOW _ ;
	(cRehKernOther cRehKernOtherMB) {advance.x -= 190m} / cRehWawTighten MARKS _ ; 

	// tighter against Ain-like initials unless it has marks Below
	cAinLikeInit                     / cRehWawTighten MARKS _ MARKS cMarksBelow ;
	cAinLikeInit {advance.x -= 215m} / cRehWawTightenToAin  MARKS _ ;
	cAinLikeInit {advance.x -= 290m} / cRehWawTightenToAinX MARKS _ ;
	
	// tighter still for some reh/wah followed by Ain-like isolates
	cAinLikeIsol {advance.x -= 580m} / cRehWawTightenToAinIsol MARKSABOVE _ ;


	// Kerning after isolate lam-alef

#if (STYLE == BOLD)
	  cLamAlefKern {advance.x -= 30m}  /  cAlefFinPostLamIni  MARKS ^ _;
#else
	  cLamAlefKern {advance.x -= 70m}  /  cAlefFinPostLamIni  MARKS ^ _;
#endif

endpass; // 3

endif;


///////////////////////////////////////////////////////////////////
//
//  COLLISION FIXING

table(glyph)	// classes for collision handling

cNoonGhunna = (g_noonghunna_ar g_noonghunna_ar_init g_noonghunna_ar_medi g_noonghunna_ar_fina);

cRnoonLikeMedi = (g_rnoon_ar_medi  g_highhamza_yeh_ar_medi);	// Expanded to 5.1  // TODO: extend this group?

/*
cKehehLikeFin = (
		g_keheh_twodotshorizontalabove_ar_fina  g_keheh_threedotsbelow_ar_fina
		g_keheh_ar_fina  g_keheh_dotabove_ar_fina  g_keheh_threedotsabove_ar_fina
		g_keheh_threedotsupbelow_ar_fina  g_kaf_ring_ar_fina  
		g_gaf_ar_fina  g_gaf_ring_ar_fina  g_gaf_threedots_ar_fina  g_gaf_twodotsbelow_ar_fina
		g_gaf_invertedstroke_ar_fina  g_ngoeh_ar_fina  g_gueh_ar_fina );
*/
	
g_abs_auto_kashida {dbgAw = aw; dbgBbW = bb.width};

cMarksAny = (cMarksAbove cMarksBelow);

endtable; // glyph

table(subs)

pass(6)
	// Insert kashidas to handle collisions; however, the kashida we're inserting is
	// 250m, wider than we really need, so in a later pass we kern out some of the extra space.

	(cKafLikeInitMedi cJeemLikeInitMedi  g_noon_ar_medi)  _  >  @1 g_abs_auto_kashida:R / _ MARKS _ cRnoonLikeNarrow=R;
	
	(cTooth3wBelowInit cTooth3wBelowMedi cTooth2wBelowInit cTooth2wBelowMedi)  _  _  
		>  @1 g_abs_auto_kashida:MF g_abs_auto_kashida:MF
		/  _ MARKS _ _ cTooth3wBelowMedi=MF;
	(cTooth3wBelowInit cTooth3wBelowMedi)  _  >  @1 g_abs_auto_kashida:F
		/  _ MARKS _ cYehLikeFina=F;
#if (STYLE == BOLD)
	cTooth2wBelowMedi  _  >  @1  g_abs_auto_kashida:M  /  _ MARKS _ cTooth2wBelowMedi=M;
	cTooth2wAboveMedi  _  >  @1  g_abs_auto_kashida:M  /  _ MARKS _ cTooth2wAboveMedi=M;

	cTooth2wAboveInit  _  >  @1  g_abs_auto_kashida:M  /  _ MARKS _ cFehQaf2wAboveMedi=M;
	(cFehQaf2wAboveInit cFehQaf2wAboveMedi)  _  >  @1  g_abs_auto_kashida:M  /  _ MARKS _ cFehQaf2wAboveMedi=M;
#endif

	(cTooth2wBelowInit cTooth3wBelowInit)  _  >  @1 g_abs_auto_kashida:MF / _ MARKS _ (cTooth2wBelowMedi cYehLikeFina)=MF;

	// Currently these do not need kerning later:
	g_teh_tehabove_ar_medi  _  >  @1 g_abs_auto_kashida:M  / _ MARKS _ cTooth2wAboveInitMedi=M;
	cTooth2wwAboveInitMedi  _  >  @1 g_abs_auto_kashida:M  / _ MARKS _ cTooth2wwAboveInitMedi=M;

	cTooth g_alefabove_ar cTooth cMarksAbove  /  _ _ cMarksBelow? ^ _ _; // dagger-alef doesn't need kashida
	cTooth cMarksAbove cTooth g_alefabove_ar  /  _ _ cMarksBelow? ^ _ _;

	// tooth forms with two diacritics above; keep this rule after the ones above
	cTooth cMarksAbove  _  cTooth cMarksAbove  >  @T1 @D1  g_abs_auto_kashida:T2  @T2  @D2  / _=T1 _=D1 cMarksAny? _ ^ _=T2 _=D2;

	cTooth cMarksAbove  _  g_teh_marbuta_ar_fina=TM  >  @1 @2 g_abs_auto_kashida:TM  @TM  / _ _ cMarksAny? _ _;

	cTooth2wBelowRstrk _  >  @T  g_abs_auto_kashida:R  /  _=T  MARKS _ g_reh_stroke_ar_fina=R;

	cLamLikeInitMedi _  >  @L  g_abs_auto_kashida:L  /  _=L  cMarksBelow cMarksAbove? _ ^ (cYehLikeFina cTooth2wBelowMedi);

	g_kashida_ar  >  g_kashida_ar_haswidth;

endpass; // 6

endtable; // sub


pass(3)	// Collisions and adjustments

	// Kashida kerning
	
	// yeh/peh + yeh/peh
	cTooth2wwBelowInit MARKS  g_abs_auto_kashida cTooth2wwBelowMedi; // wider, don't kern - 363

#if (STYLE == REGULAR)
	(cTooth3wBelowInit cTooth3wBelowMedi)  g_abs_auto_kashida {adv.x -= 20m} g_abs_auto_kashida {adv.x -= 20m}
						cTooth3wBelowMedi {adv.x -= 20m}  /  _ MARKS _ _ ^ _;
#endif

	(cTooth2wBelowInit cTooth2wBelowMedi) g_abs_auto_kashida {adv.x -= 65m} g_abs_auto_kashida {adv.x -= 65m}
						cTooth3wBelowMedi {adv.x -= 10m}  /  _ MARKS _ _ ^ _;
						
#if (STYLE == BOLD)		
	cTooth2wBelowMedi g_abs_auto_kashida {adv.x -=30m}  cTooth2wBelowMedi {adv.x -= 30m}  /  _ MARKS _ ^ _;
	cTooth2wAboveMedi g_abs_auto_kashida {adv.x -=30m}  cTooth2wAboveMedi {adv.x -= 30m}  /  _ MARKS _ ^ _;

	cTooth2wAboveInit  g_abs_auto_kashida {adv.x -= 50} cFehQaf2wAboveMedi {adv.x -= 50m} /  _ MARKS _ ^ _;
	cFehQaf2wAboveInit g_abs_auto_kashida {adv.x -= 30} cFehQaf2wAboveMedi {adv.x -= 30m} /  _ MARKS _ ^ _;
	cFehQaf2wAboveMedi g_abs_auto_kashida {adv.x -= 120} cFehQaf2wAboveMedi {adv.x -= 120m} /  _ MARKS _ ^ _;

	// teh + waw w/ something above
	cWawLikeFinaMA {adv.x += 90m}   /  cTooth2wAboveInit MARKS _;  // no kashida
	
	// kaf + teh
	cTooth2wAboveMedi {adv.x += 100m}  /  cKafLikeInit MARKS _;  // no kashida
	
	// lam-alef + teh
	cTooth2wAboveInit {adv.x += 90}  /  (g_alef_ar_fina_post_lam_ini g_alef_ar_fina_post_lam_med) MARKS _;
	
#endif

	cTooth2wBelowInit  g_abs_auto_kashida {adv.x -= 40m}  (cTooth2wBelowMedi cYehLikeFina) {adv.x -= 40m}
		/ _ MARKS _ ^ _;
		
#if (STYLE == BOLD)
	g_teheh_ar_init MARKS  g_teheh_ar_medi  {adv.x += 100m}; 
#endif

	cTooth  g_abs_auto_kashida  {adv.x -= 50m}  g_teh_marbuta_ar_fina {adv.x -= 50m}  /  _ MARKS _  _ ;
	
	// kaf + rnoon
	(cKafLikeInitMedi cJeemLikeInitMedi  g_noon_ar_medi)  MARKS  g_abs_auto_kashida {adv.x -= 120m}  cRnoonLikeNarrow;

//	cLamLikeInitMedi g_abs_auto_kashida {adv.x -=50} (cYehLikeFina cTooth2wBelowMedi) {adv.x -=50m} / _ MARKS _ ^ _;
	
	
	// Simple adjustments
		
	// alef-rreh
	(g_alef_ar  g_alef_ar_fina) MARKS g_rreh_ar {advance.x += 70m} ;

	// alef + takhallus (name marker)
	(g_alef_ar g_alef_ar_fina) MARKS  g_hehgoal_ar_init
		g_takhallusabove_ar {shift.x = 350m; shift.y = 300m};
	(g_alef_ar g_alef_ar_fina) MARKS g_teh_marbuta_ar  // teh-marbuta doesn't need so much shift
		g_takhallusabove_ar {shift.y = 150m}; // or: {shift.x = 250m};
	(g_alef_ar g_alef_ar_fina) MARKS cHehLikeIsolate
		g_takhallusabove_ar {shift.y = 320m}; // or: {shift.x = 250m};
#if (STYLE == BOLD)
	(g_alef_twoabove_ar g_alef_threeabove_ar g_alef_twoabove_ar_fina g_alef_threeabove_ar_fina) MARKS  g_teh_marbuta_ar
		g_takhallusabove_ar {shift {x = -550m; y = 220m}};
	(g_alef_twoabove_ar g_alef_threeabove_ar g_alef_twoabove_ar_fina g_alef_threeabove_ar_fina) MARKS  cHehLikeIsolate 
		g_takhallusabove_ar {shift {x = -550m; y = 430m}};
#else
	(g_alef_twoabove_ar g_alef_threeabove_ar g_alef_twoabove_ar_fina g_alef_threeabove_ar_fina) MARKS  g_teh_marbuta_ar
		g_takhallusabove_ar {shift {x = -450m; y = 220m}};
	(g_alef_twoabove_ar g_alef_threeabove_ar g_alef_twoabove_ar_fina g_alef_threeabove_ar_fina) MARKS  cHehLikeIsolate 
		g_takhallusabove_ar {shift {x = -350m; y = 430m}};
#endif
	
	// noonGhunna-vowelInvSmallV - tighten up (why is this needed?)
	// TODO - put this into OpenType????
//	cNoonGhunna (g_noonghunnaabove_ar g_vinvertedabove_ar) {shift.y = -75m}  / cKafLikeInitMedi _ _;   -- don't know why this was needed
	cNoonGhunna (g_noonghunnaabove_ar g_vinvertedabove_ar) {shift.y = -180m};

	// beh + kasra +jeem/ain/yeh-barree finals -- kasra collides with tail of tcheh/ain/yeh-barree
#if (STYLE == BOLD)
	cToothRing g_kasra_ar    {shift.y = 75m}            cYehBarreeFina  / _ _ MARKS _;  // special case
	cToothRing g_kasratan_ar {shift {x=-120m; y=-450m}} cYehBarreeFina  / _ _ MARKS _;  // special case
#else
	cToothRing g_kasra_ar                              cYehBarreeFina  / _ _ MARKS _;  // okay for yeh-barree
	cToothRing g_kasratan_ar {shift {x=-120m; y=180m}} cYehBarreeFina  / _ _ MARKS _;  // special case
#endif

#if (STYLE == BOLD)
	cTooth1hBelow g_kasra_ar    {shift.y = -300m}               cYehBarreeFina  / _ _ MARKS _;
	cTooth1hBelow g_kasratan_ar {shift {x = -100m; y = -200m}}  cYehBarreeFina  / _ _ MARKS _;
#else
	cTooth1hBelow g_kasra_ar    {shift.y = 145m}                cYehBarreeFina  / _ _ MARKS _;
	cTooth1hBelow g_kasratan_ar {shift {x = -200m; y = 290m}}   cYehBarreeFina  / _ _ MARKS _; // tight!
#endif
	cTooth2hBelow g_kasra_ar    {shift.y = -200m}  cYehBarreeFina  / _ _ MARKS _;
	cTooth2hBelow g_kasratan_ar {shift.y = -100m}  cYehBarreeFina  / _ _ MARKS _;
	cTooth0Below  g_kasratan_ar {shift.y =  150m}  cYehBarreeFina  / _ _ MARKS _;

#if (STYLE == BOLD)
	cTooth1hBelow g_kasra_ar    {shift.x = -10m; shift.y = -300m}  cJeemAinLikeFina  / _ _ MARKS _;
#else
	cTooth1hBelow g_kasra_ar    {shift.x = -120m; shift.y = 150m}  cJeemAinLikeFina  / _ _ MARKS _;
#endif
	cTooth1hBelow g_kasratan_ar {shift.x = -100m; shift.y = 30m}   cJeemAinLikeFina  / _ _ MARKS _;
	cTooth2hBelow g_kasra_ar    {shift.y = -100m} cJeemAinLikeFina / _ _ MARKS _;
	cTooth2hBelow g_kasratan_ar {shift.x = -50m}  cJeemAinLikeFina / _ _ MARKS _;
	cTooth0Below  g_kasratan_ar {shift.x = -100m} cJeemAinLikeFina / _ _ MARKS _;
	
	// alef-maddah + gaf
	(g_alef_ar g_alef_ar_fina)  g_madda_ar_small {shift.x = -20m}  cGafIsolInit {adv.x += 130m}     / _ _ MARKS _;
	(g_alef_ar g_alef_ar_fina)  g_madda_ar       {shift.x = -90m}  cGafIsolInit {adv.x += 170m}     / _ _ MARKS _;
	(g_alef_ar g_alef_ar_fina)  g_madda_ar       {shift.x = -70m}  cLamLikeIsolInit {adv.x += 170m} / _ _ MARKS _;

	// beh + reh-stroke
	////cTooth2wBelow  MARKS  g_abs_auto_kashida {adv.x -= 90m}  g_reh_stroke_ar_fina {adv.x -= 90m}; - doesn't need kerning
	(cTooth1hBelow cTooth2hBelow ) MARKS g_reh_stroke_ar_fina {adv.x += 100m};  // slight kerning doesn't need a kashida

	// beh-like + something above + reh-tah
	cToothPlusAbove MARKS  g_reh_twodotshorizontalabove_tahabove_ar_fina {adv.x += 130m};
	(cTooth1hBelow cTooth2hBelow cTooth0Below)
		cMark2Above {shift.x = -50m}
		g_reh_twodotshorizontalabove_tahabove_ar_fina {adv.x += 140m};

	// AE + kaf
	cKafLikeInit {adv.x -= 300m}  /  (g_ae_ar g_ae_ar_fina)  MARKSBELOW  _;

	// kehehDots-keheh - no longer needed
	//(absKehehThreeDotsAboveIni absKehehThreeDotsAboveMed) MARKS cKehehLikeFin {adv.x += 70m};

endpass;

// End of kerning code
#endif

endtable; // pos

endenvironment;
