#**********************************
# This file is part of Scheherazade font family (http://software.sil.org/scheherazade/) 
# and is Copyright (c) 1994-2022 SIL International (http://www.sil.org/),
# with Reserved Font Names "Scheherazade" and "SIL".
#
# This Font Software is licensed under the SIL Open Font License, Version 1.1.
#
# You should have received a copy of the license along with this Font Software.
# If this is not the case, go to (http://scripts.sil.org/OFL) for all the
# details including an FAQ.
#**********************************


#**********************************
#  Language Systems
#**********************************

languagesystem arab dflt ;
languagesystem arab KIR  ;    # Kirghiz
languagesystem arab KUR  ;    # Kurdish
languagesystem arab RHG  ;    # Rohingya -- supported by Harfbuzz
languagesystem arab SND  ;    # Sindhi
languagesystem arab URD  ;    # Urdu
languagesystem arab WLF  ;    # Wolof
languagesystem latn dflt ;

@MarksAbove = [@_diaA] ;
@MarksBelow = [@_diaB] ;
@MarksAny = [@_diaA @_diaB] ;


#**********************************
#  Substitution Lookups
#**********************************

#---  rtlm feature  ---

lookup Mirror {
  lookupflag IgnoreMarks ;
    sub @cno_rtl by @c_rtl ;
} Mirror;


#---  ccmp feature  ---

lookup SmallMaddah {
  lookupflag 0 ;
    sub @Maddah by @Maddah.small ;
} SmallMaddah;

lookup DecomposeForColor {
  lookupflag 0 ;
    sub @AlefPlusMark by alef-ar @AlefMark ;
} DecomposeForColor;


lookup _FontCheck1_target {
  lookupflag IgnoreMarks ;
    sub U n k n o w n by O ;
} _FontCheck1_target ;

lookup FontCheck1 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g U' lookup _FontCheck1_target n'  k'  n'  o'  w'  n'  ;
} FontCheck1;

lookup _FontCheck2_target {
  lookupflag IgnoreMarks ;
    sub O by O p e n T y p e ;
} _FontCheck2_target ;

lookup FontCheck2 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g O' lookup _FontCheck2_target ;
} FontCheck2;


#---  fina feature  ---

lookup ltrFina {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkFina ;
    sub @RightLinkIsol by  @RightLinkFina ;
} ltrFina;

#---  medi feature  ---

lookup ltrMedi {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkMedi ;
} ltrMedi;

#---  init  feature  ---

lookup ltrInit {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkInit ;
} ltrInit;


#---  rlig feature  ---

#********
# Allah "ligature" (implemented by variant forms for glyphs rather than by ligature glyph):

lookup _AllahSub_Alef {
    sub @AlefNoAllah  by  @AlefAllah;
} _AllahSub_Alef;

lookup _AllahSub_Lam1 {
    sub @Lam1NoAllah  by  @Lam1Allah;
} _AllahSub_Lam1;

lookup _AllahSub_Lam2 {
    sub lam-ar.medi     by lam-ar.medi.allah2;
} _AllahSub_Lam2;

lookup _AllahSub_Lam2_insertSA {    # insert shadda-alef
  lookupflag 0;
    sub lam-ar.medi  by  lam-ar.medi.allah2  shadda_alef-ar ;
} _AllahSub_Lam2_insertSA;

lookup _AllahSub_Heh {
    sub @HehNoAllah  by  @HehAllah;
} _AllahSub_Heh;

lookup _AllahSub_Shadda_insertA {
    sub shadda-ar     by   shadda_alef-ar;
} _AllahSub_Shadda_insertA;


# Note:
# The shadda-alef ligature is created later in a separate lookup - ShaddaAlefLigatures.
# Also the special form of the alef is created later (except in the case of Rule 3) - lookup AllahAlef -
# in order to allow for the lam-alef ligature exception.

lookup AllahLigatures {
  lookupflag 0;
    # Rule 3: alefIso-lam-lam-heh (no shadda-alef)
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        lam-ar.init'        lookup _AllahSub_Lam1
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny' 
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
    
    #Rule 3b: alefIso-lam-kasra-lam-heh (no shadda-alef)
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        lam-ar.init'        lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny' 
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    # Rule 2: lam-lam-shadda-heh
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        lam-ar.medi'             lookup _AllahSub_Lam2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'               lookup _AllahSub_Shadda_insertA
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    # Rule 2b: lam-kasra-lam-shadda-heh
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'             lookup _AllahSub_Lam2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'               lookup _AllahSub_Shadda_insertA
        @HehNoAllah'             lookup _AllahSub_Heh;
        
} AllahLigatures;


#********
# Hamza ligation

# Include in this filter hamzaAbove plus any mark glyphs that should stop any ligation.
# Mark glyphs not included will be skipped over when trying to find a hamzaAbove
@HamzaAboveFilter = [@UTR53_230MCM @UTR53_230other graphemejoinercomb ] ;

lookup ComposeLowHamzaAbove {
  lookupflag UseMarkFilteringSet @HamzaAboveFilter ;
    sub @LowHamzaBase hamzaabove-ar by @LowHamzaComposed ;
} ComposeLowHamzaAbove;


@LigateHamzaMarksFilter = [ hamzaabove-ar @HamzaMarks ] ;
lookup _LigateHamzaMarks {
  lookupflag UseMarkFilteringSet @LigateHamzaMarksFilter ;
    sub hamzaabove-ar @HamzaMarks by @HamzaLigatures ;
    sub @HamzaMarks hamzaabove-ar by @HamzaLigatures ;
} _LigateHamzaMarks;

@HamzaLigatureFilter = [ @HamzaAboveFilter @HamzaMarks shadda-ar ] ;
lookup HamzaLigatures {
  lookupflag UseMarkFilteringSet @HamzaLigatureFilter ;
    # shouldn't ligate hamza + following fatha|damma when hamza preceded by non-MCM 230 because 
    # UTR53 would have moved the fatha|damma to before the 230 marks but could not move the 
    # hamza as it isn't at the beginning of the 230 sequence.
    ignore sub @UTR53_230other               hamzaabove-ar' ;
    ignore sub @UTR53_230other @UTR53_230MCM hamzaabove-ar' ;
    # shouldn't ligate fatha|damma + following hamza when a 230MCM follows the hamza because
    # UTR53 would have moved both hamza and following 230MCM to before the fatha|damma at which
    # point the 230MCM would be between the hamza and the fatha|damma, blocking ligation.
    ignore sub @HamzaMarks'                  hamzaabove-ar @UTR53_230MCM ;
    ignore sub @HamzaMarks'    @UTR53_230MCM hamzaabove-ar @UTR53_230MCM ;
    # otherwise we can ligate in these situations:
    sub hamzaabove-ar' lookup _LigateHamzaMarks                                                   @HamzaMarks ;
    sub hamzaabove-ar' lookup _LigateHamzaMarks @UTR53_230other                                   @HamzaMarks ;
    sub hamzaabove-ar' lookup _LigateHamzaMarks @UTR53_230other [ @UTR53_230other @UTR53_230MCM ] @HamzaMarks ;
    sub @HamzaMarks'   lookup _LigateHamzaMarks                 hamzaabove-ar ;
    sub @HamzaMarks'   lookup _LigateHamzaMarks @UTR53_230MCM   hamzaabove-ar ;
} HamzaLigatures; 


#********
# Shadda ligation

# Including graphemejoinercomb allows it to interrupt the ligature formation,
#    otherwise the lookupflag causes it to be ignored.
@ShaddaLigatureFilter = [ @ShaddaMarks @ShaddaKasraMarks shadda-ar alefabove-ar graphemejoinercomb ] ;
lookup ShaddaLigatures {
  lookupflag UseMarkFilteringSet @ShaddaLigatureFilter ;
    sub shadda-ar @ShaddaMarks  by  @ShaddaLigatures ;
    sub @ShaddaMarks shadda-ar  by  @ShaddaLigatures ;
} ShaddaLigatures;

# In theory we could do this up where we create the Allah ligature, but this simpler:
lookup ShaddaAlefLigatures {
  lookupflag UseMarkFilteringSet @ShaddaLigatureFilter ;
    sub lam-ar.medi.allah2 shadda-ar' alefabove-ar'  by  shadda_alef-ar;
    sub lam-ar.medi.allah2 alefabove-ar' shadda-ar'  by  shadda_alef-ar;
} ShaddaAlefLigatures;


#---  calt feature  ---

#********
# Language-specific shaping

lookup dfltCALT {
  lookupflag 0 ;
     sub tab by tab;   # Need a dummy lookup for Typetuner
} dfltCALT;

lookup KurdishCALT {
  lookupflag 0 ;
    sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    sub heh-ar by heh-ar.knotted ;
} KurdishCALT;

lookup RohingyaCALT {
  lookupflag 0 ;
    sub four-persian by four-persian.roh ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @cno_sixNine by @c_sixNine ;
    sub @Kasra by @Kasra_lowered ;
} RohingyaCALT  ;

lookup SindhiCALT {
  lookupflag 0 ;
    #sub heh-ar.medi by heh-ar.medi.knottedHigh ; -- done by HehAlternates
    #sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    #sub heh-ar by heh-ar.knotted ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @Meem by @Meem.sindhi ;
    sub @Kasra by @Kasra_lowered;
    sub comma-ar by comma-ar.downward ;
    sub semicolon-ar by semicolon-ar.downward ;
} SindhiCALT;

lookup UrduCALT {
  lookupflag 0 ;
    sub four-persian by four-persian.urdu ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @Kasra by @Kasra_lowered;
} UrduCALT;

lookup WolofCALT {
  lookupflag 0 ;
    sub @cno_loclWLF     by  @c_loclWLF ;
    sub @Damma           by  @Damma_short ;
    sub @Kasra           by  @Kasra_lowered ;
    sub dammainverted-ar by  dammainverted-ar.open ;
} WolofCALT;

lookup KirghizCALT {
  lookupflag 0;
    sub @cno_loclKIR  by  @c_loclKIR ;
} KirghizCALT;


#********************
# Reordering of madda: moving it beyond any mark with 0 < ccc < 230
#
# If Harfbuzz is rendering, UTR53 will already have been executed, thus the following will do nothing
# Otherwise, we can't do a lot of reordering but we'll move the madda out past vowels
# in a way that is compatible with UTR53.

@MaddaSkip = [ @UTR53_shadda @UTR53_fixedPos @UTR53_alef @UTR53_220MCM @UTR53_220other ] ;

lookup _ReorderMaddaVowel1 {
  lookupflag 0 ;
    sub @MaddaSkip by @MaddaSkip madda-ar.small ;
} _ReorderMaddaVowel1 ;

lookup ReorderMaddaVowel1 {
  lookupflag 0 ;
    sub madda-ar.small @MaddaSkip' lookup _ReorderMaddaVowel1 ;
} ReorderMaddaVowel1;

lookup _ReorderMaddaVowel2 {
  lookupflag 0 ;
    sub madda-ar.small @MaddaSkip by @MaddaSkip ;
} _ReorderMaddaVowel2 ;

lookup ReorderMaddaVowel2 {
  lookupflag 0 ;
    sub madda-ar.small' lookup _ReorderMaddaVowel2  @MaddaSkip madda-ar.small ;
} ReorderMaddaVowel2;


#********
# Heh alternates

lookup SindhiHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub heh-ar.medi by heh-ar.medi.knottedHigh ;
    sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    sub heh-ar by heh-ar.knotted ;
} SindhiHeh;

lookup KurdishHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    sub heh-ar by heh-ar.knotted ;
} KurdishHeh;

# heh-hook is no longer defined for Urdu; used only for TypeTuner
lookup UrduHeh {
  lookupflag IgnoreMarks ;
    sub heh-ar.init by heh-ar.init.hooked ;
    sub heh-ar.medi by heh-ar.medi.hooked ;
    sub heh-ar.fina by heh-ar.fina.hooked ;
    # In case Lang=Kurdish set:
    sub heh-ar.knotted by heh-ar;
    sub heh-ar.fina.knottedHigh by heh-ar.fina.hooked ;
} UrduHeh;


lookup HehAlternates {
  lookupflag IgnoreMarks ;
    #   0=default;         1=Sindhi;                2=Urdu;             3=Kurdish
    sub heh-ar      from [ heh-ar.knotted           heh-ar              heh-ar.knotted ] ;
    sub heh-ar.fina from [ heh-ar.fina.knottedHigh  heh-ar.fina.hooked  heh-ar.fina.knottedHigh ] ;
    sub heh-ar.init from [ heh-ar.init              heh-ar.init.hooked  heh-ar.init ] ;
    sub heh-ar.medi from [ heh-ar.medi.knottedHigh  heh-ar.medi.hooked  heh-ar.medi ] ;
    # In case Kurdish lang has been selected:
    sub heh-ar.knotted          from   [ heh-ar.knotted          heh-ar             heh-ar.knotted          ] ;
    sub heh-ar.fina.knottedHigh from   [ heh-ar.fina.knottedHigh heh-ar.fina.hooked heh-ar.fina.knottedHigh ] ;
} HehAlternates;


#********
# Other alternates

lookup DalAlternate {
  lookupflag IgnoreMarks ;
    sub @DalIso by @DalIso.sen ;
} DalAlternate;

lookup MeemAlternate {
  lookupflag IgnoreMarks ;
    sub @Meem by @Meem.sindhi ;  # also used by Kurdish and Urdu
} MeemAlternate;

lookup MaddahAlternate {
  lookupflag 0 ;
    sub @Maddah.small by @Maddah ;
} MaddahAlternate;

#TypeTuner lookups:
lookup KasraLow {
  lookupflag 0 ;
    sub @Kasra by @Kasra_lowered;
} KasraLow;

lookup KasraHigh {
  lookupflag 0 ;
    sub @Kasra_lowered by @Kasra;
} KasraHigh;

lookup KasraAlternates {
  lookupflag 0 ;
    # NB: This is writen so it doesn't matter which shadda-kasra behavior is default.
    #   0=default (raised)    1=lowered       2=raised
    sub @Kasra_lowered from [ @Kasra_lowered  @Kasra ];
    sub @Kasra         from [ @Kasra_lowered  @Kasra ];
} KasraAlternates;

lookup DammaAlternates {
  lookupflag 0 ;
    sub @Damma        from [ @Damma_filled  @Damma_short ];
    sub @Damma_filled from [ @Damma_filled  @Damma_short ];
    sub @Damma_short  from [ @Damma_filled  @Damma_short ];
} DammaAlternates;

lookup DammatanAlternate {
  lookupflag 0 ;
    sub @Dammatan by @Dammatan.sixNine ;
} DammatanAlternate;

lookup DammaInvertedAlternates {
  lookupflag 0 ;
    #   0=default (filled);        1=hollow;                2=filled
    sub dammainverted-ar      from [ dammainverted-ar.open  dammainverted-ar ];
    sub dammainverted-ar.open from [ dammainverted-ar.open  dammainverted-ar ];
} DammaInvertedAlternates;

lookup _DaggerAlefToLarge_target {
  lookupflag 0 ;
    # 0=default;            1=large;            2=small
    sub alefabove-ar from [ alefabove-ar.large  alefabove-ar ];
    #sub alefabove-ar by alefabove-ar.large ;
} _DaggerAlefToLarge_target ;

lookup DaggerAlefToLarge {
  lookupflag 0 ;
    sub @TakesLargeDaggerAlef alefabove-ar' lookup _DaggerAlefToLarge_target ;
} DaggerAlefToLarge;

lookup SukunAlternates {
  lookupflag 0 ;
    sub sukun-ar from [ sukun-ar.downOpen sukun-ar.leftOpen ] ;
} SukunAlternates;

lookup AyahAlternates {  # salt feature
  lookupflag 0 ;
    sub endofayah-ar   from [ endofayah-ar.alt    endofayah-ar.altB ] ;
    sub endofayah-ar.2 from [ endofayah-ar.alt.2  endofayah-ar.altB.2 ] ;
    sub endofayah-ar.3 from [ endofayah-ar.alt.3  endofayah-ar.altB.3 ] ;
} AyahAlternates;

lookup HonLigAlternates {
  lookupflag 0;
    sub @HonLigCall from @HonLigSmpl ;
} HonLigAlternates;

lookup KirghizOeAlternates {
  lookupflag 0;
    sub @cno_bar  by  @c_bar;
} KirghizOeAlternates;

lookup YehHamzaAlternates {
  lookupflag 0;
    sub yehHamzaabove-ar       by  yehHamzaabove-ar.loclKIR;
    #sub yehHamzaabove-ar.init  by  yehHamzaabove-ar.init.loclKIR;
    #sub yehHamzaabove-ar.medi  by  yehHamzaabove-ar.medi.loclKIR;
    sub yehHamzaabove-ar.fina  by  yehHamzaabove-ar.fina.loclKIR;
} YehHamzaAlternates;

#********
# Digit alternates

# TypeTuner lookups:

lookup DigitSindhi {
  lookupflag 0;
    sub four-persian.urdu   by four-persian;
    sub four-persian.roh    by four-persian;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitSindhi;

lookup DigitUrdu {
  lookupflag 0;
    sub four-persian        by four-persian.urdu;
    sub four-persian.roh    by four-persian.urdu;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitUrdu;

lookup DigitKurdish {
  lookupflag 0;
    sub four-persian.urdu   by four-persian;
    sub four-persian.roh    by four-persian;
    sub six-persian.urdu    by six-persian;
    sub seven-persian.urdu  by seven-persian;
} DigitKurdish;

lookup DigitRohingya {
    sub four-persian        by four-persian.roh;
    sub four-persian.urdu   by four-persian.roh;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitRohingya;

@FourPersian = [ four-persian  four-persian.medium four-persian.small ];
@FourPersianUrdu = [ four-persian.urdu  four-persian.urdu.medium four-persian.urdu.small ];
@FourPersianRoh = [ four-persian.roh  four-persian.roh.medium four-persian.roh.small ];

# Only used for cv82, not language-specific modifications:
# We include the Kurdish forms as a place holder for value 3, even though they are not offered as a supported value.
# They are simply the standard Persian forms.
lookup DigitAlternates {
  lookupflag 0 ;        #        1 = Sindhi-style     2 = Urdu-style       3 = Kurdish-style   4 = Rohingya-style
    sub four-persian       from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub four-persian.urdu  from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub four-persian.roh   from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub six-persian        from [six-persian.urdu     six-persian.urdu     six-persian         six-persian.urdu  ];
    sub six-persian.urdu   from [six-persian.urdu     six-persian.urdu     six-persian         six-persian.urdu  ];
    sub seven-persian      from [seven-persian.urdu   seven-persian.urdu   seven-persian       seven-persian.urdu];
    sub seven-persian.urdu from [seven-persian.urdu   seven-persian.urdu   seven-persian       seven-persian.urdu];
} DigitAlternates;

lookup CommaAlternates {
  lookupflag IgnoreMarks ;
    sub comma-ar by comma-ar.downward ;
    sub semicolon-ar by semicolon-ar.downward ;
} CommaAlternates;

lookup DecimalSepAlternate {
  lookupflag IgnoreMarks ;
    sub decimalseparator-ar by decimalseparator-ar.slash;
} DecimalSepAlternate;


#---  liga feature  ---

#********
# Shadda+kasra handling

lookup ShaddaKasraLigatures {
  lookupflag MarkAttachmentType @ShaddaLigatureParts;
    sub @ShaddaKasraMarks                    shadda-ar  by  @ShaddaKasraLigatures ;
    sub @ShaddaKasraMarks graphemejoinercomb shadda-ar  by  @ShaddaKasraLigatures ;
    sub shadda-ar                    @ShaddaKasraMarks  by  @ShaddaKasraLigatures ;
    sub shadda-ar graphemejoinercomb @ShaddaKasraMarks  by  @ShaddaKasraLigatures ;
} ShaddaKasraLigatures;


#********
# Subtending mark digits

# Keep after cv82 (DigitAlternates)

lookup SignWith_4digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_4 by @c_4 ;
} SignWith_4digits_target ;

lookup SignWith_3digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_3 by @c_3 ;
} SignWith_3digits_target ;

lookup SignWith_2digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_2 by @c_2 ;
} SignWith_2digits_target ;

lookup SignDigits_ToMedium_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnyMedium ;
} SignDigits_ToMedium_target ;

lookup SignDigits_ToSmall_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnySmall ;
} SignDigits_ToSmall_target ;

# Keep after cv82, so that the right digit alternates are already selected by now:
lookup SignWithDigits {
  lookupflag IgnoreMarks ;
  # Uniscribe or HarfBuzz 'latn'
    sub [ year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_4digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ number-ar year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_3digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ endofayah-ar endofayah-ar.alt endofayah-ar.altB disputedendofayah-ar]' lookup SignWith_3digits_target 
        @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target ;
    sub [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar  poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_2digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target  @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]
        @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ disputedendofayah-ar ]' lookup SignWith_2digits_target
        @DigitsAny' lookup SignDigits_ToSmall_target   @DigitsAny' lookup SignDigits_ToSmall_target;
    sub [ disputedendofayah-ar ]
        @DigitsAny' lookup SignDigits_ToSmall_target;
  # HarfBuzz 'arab'
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_4digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_3digits_target ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  
        [ endofayah-ar endofayah-ar.alt endofayah-ar.altB disputedendofayah-ar]' lookup SignWith_3digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_2digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ] ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target
        [ disputedendofayah-ar ]'  lookup SignWith_2digits_target;
    sub @DigitsAny' lookup SignDigits_ToSmall_target
        [ disputedendofayah-ar ];
} SignWithDigits;


#********
# Lam-Alef Ligatures

# =====  obsolete  =====
lookup _LamAlefLig_Part1 {
  lookupflag IgnoreMarks ;
    sub @LamIni by @LamIniPreAlef ;
    sub @LamMed by @LamMedPreAlef ;
} _LamAlefLig_Part1 ;

lookup _LamAlefLig_Part2a {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinPostLamIni ;
} _LamAlefLig_Part2a ;

lookup _LamAlefLig_Part2b {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinPostLamMed ;
} _LamAlefLig_Part2b ;

lookup LamAlefLigatures_OLD {
  lookupflag IgnoreMarks ;
  # Subtable: Ligatures\Part1
    sub [ @LamIni @LamMed ]' lookup _LamAlefLig_Part1 @AlefFin ;
  # Subtable: Ligatures\Part2a
    sub @LamIniPreAlef @AlefFin' lookup _LamAlefLig_Part2a ;
  # Subtable: Ligatures\Part2b
    sub @LamMedPreAlef @AlefFin' lookup _LamAlefLig_Part2b ;
} LamAlefLigatures_OLD;
# ======================

lookup LamAlefLigatures {
  lookupflag IgnoreMarks ;
    sub @LamNoLig   alef-ar.fina                by  @LamAlefLig ;
    sub @LamNoLig   alefWasla-ar.fina           by  @LamAlefWaslaLig ;
    sub @LamNoLig   alefWavyhamzaabove-ar.fina  by  @LamAlefWavyHAboveLig ;
    sub @LamNoLig   alefWavyhamzabelow-ar.fina  by  @LamAlefWavyHBelowLig ;
    sub @LamNoLig   alefTwoabove-ar.fina        by  @LamAlefTwoAboveLig ;
    sub @LamNoLig   alefThreeabove-ar.fina      by  @LamAlefThreeAboveLig ;
    
    sub lam-ar      @AlefRareNoLig              by  @LamAlefRareLig ;
    sub lam-ar.fina @AlefRareNoLig              by  @LamAlefRareLigFina ;
} LamAlefLigatures;


# Must be after LamAlefLigatures
lookup AllahAlef {  # clean up: make sure alef is correct form for Allah
  lookupflag IgnoreMarks;
#    sub alef-ar'       lam-ar.init.allah1  by  alef-ar.allah;
#    sub alef-ar.fina'  lam-ar.init.allah1  by  alef-ar.fina.allah;
    sub @AlefNoAllah'  lam-ar.init.allah1  by  @AlefAllah;
} AllahAlef;


do if opt("nokern") != "yes";
{   # start of kerning substitutions

#********
# Kashida insertion to handle collision avoidance

@Tooth3wBelowIM = [ @Tooth3wBelowInit @Tooth3wBelowMedi ];
@Tooth2wBelowIM = [ @Tooth2wBelowInit @Tooth2wBelowMedi ];
@Tooth2w3wBelowInit = [ @Tooth2wBelowInit @Tooth3wBelowInit ];
@Tooth2w3wBelowMedi = [ @Tooth2wBelowMedi @Tooth3wBelowMedi ];
@Tooth2w3wBelow = [ @Tooth2wBelowInit @Tooth2wBelowMedi @Tooth3wBelowInit @Tooth3wBelowMedi ];

# When the class expansion bug gets fixed, replace the small classes with the bigger ones.
# OBSOLETE
lookup _InsertKashida {
  # all tooth forms:
  sub @Tooth0Below        by  @Tooth0Below        absAutoKashida;
  sub @Tooth1hBelow       by  @Tooth1hBelow       absAutoKashida;
  sub @Tooth2hBelow       by  @Tooth2hBelow       absAutoKashida;
#  sub @Tooth2wAboveInit   by  @Tooth2wAboveInit   absAutoKashida;  # redundant
#  sub @Tooth2wAboveMedi   by  @Tooth2wAboveMedi   absAutoKashida;  # redundant
#  sub @Tooth2wBelowRstrk  by  @Tooth2wBelowRstrk  absAutoKashida;  # redundant
#  sub @Tooth2wBelowMedi   by  @Tooth2wBelowMedi   absAutoKashida;  # redundant
#  sub @Tooth2w3wBelow     by  @Tooth2w3wBelow     absAutoKashida;  # redundant
#  sub @Tooth2wwAboveInit  by  @Tooth2wwAboveInit  absAutoKashida;  # redundant
#  sub @Tooth2wwAboveMedi  by  @Tooth2wwAboveMedi  absAutoKashida;  # redundant
  sub @FehQaf2wAboveInit  by  @FehQaf2wAboveInit  absAutoKashida;
  sub @FehQaf2wAboveMedi  by  @FehQaf2wAboveMedi  absAutoKashida;
  sub @KafLikeInit        by  @KafLikeInit        absAutoKashida;  # @KafLikeInitMedi
  sub @KafLikeMedi        by  @KafLikeMedi        absAutoKashida;  # @KafLikeInitMedi
  sub @JeemLikeInit       by  @JeemLikeInit       absAutoKashida;  # @JeemLikeInitMedi
  sub @JeemLikeMedi       by  @JeemLikeMedi       absAutoKashida;  # @JeemLikeInitMedi
  sub noon-ar.medi        by  noon-ar.medi        absAutoKashida;
  
  sub @MarksAny  by  @MarksAny  absAutoKashida;
} _InsertKashida;

# OBSOLETE
lookup _Insert2Kashidas {
  sub @Tooth2w3wBelow  by  @Tooth2w3wBelow  absAutoKashida  absAutoKashida;
  sub @MarksAny        by  @MarksAny  absAutoKashida  absAutoKashida;
} _Insert2Kashidas;

lookup _InsertKashidaBefore {
  sub @RnoonLikeNarrow  by  absAutoKashida  @RnoonLikeNarrow;
} _InsertKashidaBefore;

lookup _Insert2KashidasBefore {
  sub @RnoonLikeNarrow  by  absAutoKashida  absAutoKashida  @RnoonLikeNarrow;
} _Insert2KashidasBefore;


# Using separate lookups for initial-medial and medial-medial allows us to handle a chain of these.

lookup ToothKashidasIM {  # initial + medial
  lookupflag IgnoreMarks;
    sub @Tooth2w3wBelowInit  @Tooth3wBelowMedi'   lookup _Insert2KashidasBefore;
    sub @Tooth2w3wBelowInit  @Tooth2wBelowMedi'   lookup _InsertKashidaBefore;
    
    sub tehTehabove-ar.init  @Tooth2wAboveMedi'   lookup _InsertKashidaBefore;
    sub @Tooth2wwAboveInit   @Tooth2wwAboveMedi'  lookup _InsertKashidaBefore;
    
    # also qaf is similar to an initial (high) tooth
ifinfo(styleName, "Bold") {
    sub @Tooth2wAboveInit    @FehQaf2wAboveMedi'  lookup _InsertKashidaBefore;  # BOLD
    sub @FehQaf2wAboveInit   @FehQaf2wAboveMedi'  lookup _InsertKashidaBefore;  # BOLD
}

} ToothKashidasIM;


lookup ToothKashidasMM {  # medial + medial
  lookupflag IgnoreMarks;    
    sub @Tooth2w3wBelowMedi  @Tooth3wBelowMedi'   lookup _Insert2KashidasBefore;
    # 2w + 2w doesn't need a kashida

    sub tehTehabove-ar.medi  @Tooth2wAboveMedi'   lookup _InsertKashidaBefore;
    sub @Tooth2wwAboveMedi   @Tooth2wwAboveMedi'  lookup _InsertKashidaBefore;

ifinfo(styleName, "Bold") {
    sub @Tooth2wBelowMedi    @Tooth2wBelowMedi'   lookup _InsertKashidaBefore;   # BOLD
    sub @Tooth2wAboveMedi    @Tooth2wAboveMedi'   lookup _InsertKashidaBefore;   # BOLD
    
    sub @FehQaf2wAboveMedi   @FehQaf2wAboveMedi'  lookup _InsertKashidaBefore;  # BOLD
}
    
} ToothKashidasMM;


lookup ToothKashidasIMF {  #initial/medial + final
  lookupflag IgnoreMarks;
    sub @Tooth2w3wBelow  @YehLikeFina' lookup _InsertKashidaBefore;
} ToothKashidasIMF;


lookup MiscKashidas {
  lookupflag IgnoreMarks;
    sub @KafLikeInitMedi   @RnoonLikeNarrow'  lookup _InsertKashidaBefore;
    sub @JeemLikeInitMedi  @RnoonLikeNarrow'  lookup _InsertKashidaBefore;
    sub noon-ar.medi       @RnoonLikeNarrow'  lookup _InsertKashidaBefore;
        
    sub @Tooth2wBelowRstrk rehStroke-ar.fina' lookup _InsertKashidaBefore;
} MiscKashidas;

# kashidas needed due to colliding marks
lookup MarkKashidas {
    # Add kashida when upper diacritics are next to each other.
    # Note that we should ideally break this into separate rules to handle medial-medial separately, but I'm lazy.
    ignore sub @Tooth alefabove-ar  @Tooth @MarksAbove;  # dagger-alef doesn't need kashida
    ignore sub @Tooth @MarksAbove   @Tooth alefabove-ar;
    sub @Tooth  @MarksAbove' lookup _InsertKashida  @Tooth  @MarksAbove;
    
    sub @Tooth  @MarksAbove' lookup _InsertKashida  tehMarbuta-ar.fina;
} MarkKashidas;

}  # end of do - kerning substitutions


lookup WideKashida {
  sub kashida-ar'  @MarksAny  by  kashida-ar.wide;
} WideKashida;


#**********************************
#  Positioning Lookups
#**********************************

#---  kern feature  ---

#********
# Subtending mark positioning

lookup SubtendingMarks {
  lookupflag IgnoreMarks ;
    # In Graphite we use mark attachment rules. However, in OpenType positioning digits on 
    # subtending marks has to be done with adjustments rather than attachment since for some 
    # engines the digits will ordered *before* the subtending mark.
    
    # Additionally, the adjustment value records depend on font face (e.g. bold vs regular). Therefore
    # we use feax extentions to calculate the value records based on glyph advancewidths and digit AP coordinates.
    
    # In each "do" template, the first rule is ordered for Uniscribe or HarfBuzz 'latin', the second for HarfBuzz 'arab'

    # Those that take 4 medium digits
    do for m = @c_4 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos $m  @DigitsAnyMedium' <$x1 $y $w 0> @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x3 $y $w 0>  @DigitsAnyMedium' <$x4 $y $w 0> ;
        pos     @DigitsAnyMedium' <$x4 $y $w 0> @DigitsAnyMedium' <$x3 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
    
    # Those that take 3 medium digits
    do for m = [ number-ar.3 year-ar.3 pagenumber-ar.3 samvat-ar.3 numbermark-ar.3 poundmarkabove-ar.3 piastremarkabove-ar.3 ] ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w;
    {
        pos $m  @DigitsAnyMedium' <$x1 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x3 $y $w 0> ;
        pos     @DigitsAnyMedium' <$x3 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x1 $y $w 0>  $m ;
    }

    # Those that take 3 small digits (default for @c_3)
    do for m = [ endofayah-ar.3 endofayah-ar.alt.3 endofayah-ar.altB.3  disputedendofayah-ar.3] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; let x3 = x2 - w;
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x3 $y $w 0> ;
        pos     @DigitsAnySmall' <$x3 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 2 small digits
    do for m = [ disputedendofayah-ar.2 ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; 
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0>  @DigitsAnySmall' <$x2 $y $w 0> ;
        pos     @DigitsAnySmall' <$x2 $y $w 0>  @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 2 medium digits (default for @c_2)
    do for m = @c_2 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
       let x2 = x1 - w; 
    {
        pos $m  @DigitsAnyMedium' <$x1 $y $w 0>  @DigitsAnyMedium' <$x2 $y $w 0> ;
        pos     @DigitsAnyMedium' <$x2 $y $w 0>  @DigitsAnyMedium' <$x1 $y $w 0>  $m ;
    }
    
    # Those that take 1 small digit
    do for m = [ disputedendofayah-ar ] ;
       let y = APy(m, "digitR") - APy("zero.small", "digitL");
       let w = -ADVx("zero.small"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
    {
        pos $m  @DigitsAnySmall' <$x1 $y $w 0> ;
        pos     @DigitsAnySmall' <$x1 $y $w 0>  $m ;
    }

    # Those that take 1 medium digit (default)
    do for m = @cno_2 ;
       let y = APy(m, "digitR") - APy("zero.medium", "digitL");
       let w = -ADVx("zero.medium"); 
       let x1 = APx(m, "digitR") - ADVx(m); 
    {
        pos $m @DigitsAnyMedium' <$x1 $y $w 0> ;
        pos    @DigitsAnyMedium' <$x1 $y $w 0> $m ;
    }
 
} SubtendingMarks;



do if opt("nokern") != "yes";
{  # start of kerning positioning lookups

#********
# Kerning for collision avoidance

@RehKernAlefOrOther = [@RehKernAlef @RehKernOther];
@RehKernAlefOrMB = [@RehKernAlef @RehKernOtherMB];
@RehKernMost = [@RehKernOther @RehKernOtherMB];

@AlefForms = [alef-ar alef-ar.fina];
@AlefDigit = [alefTwoabove-ar alefThreeabove-ar alefTwoabove-ar.fina alefThreeabove-ar.fina];

lookup _kern50 {
  pos @RehWawAll    <50 0  50 0>;
  pos highhamza-ar  <50 0  50 0>;
} _kern50;

lookup _kern70 {
  pos @RehWawAll <70 0  70 0>;
} _kern70;

lookup _kern90 {
  pos @Tooth2wAboveInit        <90 0  90 0>;
  pos alef-ar.fina.postLamIni  <90 0  90 0>;
  pos alef-ar.fina.postLamMed  <90 0  90 0>; 
} _kern90;

lookup _kern100 {
  pos @Tooth1hBelow <100 0  100 0>;
  pos @Tooth2hBelow <100 0  100 0>;
  pos teheh-ar.init <100 0  100 0>;
  pos @KafLikeInit  <100 0  100 0>;
} _kern100;

lookup _kern130 {
  pos @RehWawAll      <130 0  130 0>;
  pos @ToothPlusAbove <130 0  130 0>;
  pos @AlefForms      <130 0  130 0>;
  pos highhamza-ar    <130 0  130 0>;
} _kern130;

lookup _kern140 {
  pos @Tooth  <140 0  140 0>;
} _kern140;

lookup _kern150 {
  pos @RehWawAll  <150 0  150 0>;
} _kern150;

lookup _kern170 {
  pos @RehWawAll         <170 0  170 0>;
  pos @Tooth2wBelowRstrk <170 0  170 0>;
  pos @AlefForms         <170 0  170 0>;
} _kern170;

lookup _kern215 {
  pos @RehWawAll <215 0  215 0>;
} _kern215;

lookup _kern290 {
  pos @RehWawTighten <200 0  200 0>;
} _kern290;

lookup _kern_190 {
  pos @RehWawTighten <-190 0  -190 0>;
} _kern_190;

lookup _kern_215 {
  pos @RehWawTighten <-215 0  -215 0>;
} _kern_215;

lookup _kern_290 {
  pos @RehWawTighten <-290 0  -290 0>;
} _kern_290;

lookup _kern_300 {
  pos ae-ar       <-300 0  -300 0>;
  pos ae-ar.fina  <-300 0  -300 0>;
} _kern_300;

lookup _kern_380 {
  pos @RehWawTighten <-380 0  -380 0>;
} _kern_380;

lookup _kern_410 {
  pos @RehWawTighten <-410 0  -410 0>;
} _kern_410;

lookup _kern_550 {
  pos @RehWawTighten <-550 0  -550 0>;
} _kern_550;

lookup _kern_580 {
  pos @RehWawTighten <-580 0  -580 0>;
} _kern_580;


# Break this into a separate lookup to handle a sequence like waw + reh + alef
lookup RehWawKerning1 {
  lookupflag IgnoreMarks;
  
ifinfo(styleName, "Bold") {
  pos @WawLike' lookup _kern50  @RehLikeIsol; 
}
ifinfo(styleName, "Regular") {
  # bogus, but it seems to be needed to make the build happy:
  ignore pos @WawLike @RehLikeIsol;
}
  # standard spacing is pretty good - don't futz with it.
  #ignore pos @RehWawAll  @RehWawAll;
} RehWawKerning1;


lookup RehWawKerning {
  # does not ignore diacritics
  
  # Tighten to following gaf-like
ifinfo(styleName, "Bold") {
  pos @RehWawTighten' lookup _kern_380                @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_380 @_diaB         @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_380 @_diaB @_diaB  @RehKernKaf ;
}
ifinfo(styleName, "Regular") {
  pos u-ar' lookup _kern_410                @RehKernKaf ;  # special case
  pos u-ar' lookup _kern_410 @_diaB         @RehKernKaf ;
  pos u-ar' lookup _kern_410 @_diaB @_diaB  @RehKernKaf ;

  pos @RehWawTighten' lookup _kern_550                @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_550 @_diaB         @RehKernKaf ;
  pos @RehWawTighten' lookup _kern_550 @_diaB @_diaB  @RehKernKaf ;
}

  # Loosen from following alef/lam when it has something below it
  pos reh-ar' lookup _kern290                      alefWavyhamzabelow-ar ;
  pos reh-ar' lookup _kern290 @MarksAny            alefWavyhamzabelow-ar ;
  pos reh-ar' lookup _kern290 @MarksAny @MarksAny  alefWavyhamzabelow-ar ;
    
  pos @RehWawAll' lookup _kern215                      @AlefLamWBelow ;
  pos @RehWawAll' lookup _kern215 @MarksAny            @AlefLamWBelow ;
  pos @RehWawAll' lookup _kern215 @MarksAny @MarksAny  @AlefLamWBelow ;
  
  pos @RehWawAll' lookup _kern215                      @AlefIso @_diaB ;
  pos @RehWawAll' lookup _kern215 @MarksAny            @AlefIso @_diaB ;
  pos @RehWawAll' lookup _kern215 @MarksAny @MarksAny  @AlefIso @_diaB ;
  
  # Loosen from following narrow initials with something below:
  pos @RehWawAll' lookup _kern130                      @NarrowIni @_diaB ;
  pos @RehWawAll' lookup _kern130 @MarksAny            @NarrowIni @_diaB ;
  pos @RehWawAll' lookup _kern130 @MarksAny @MarksAny  @NarrowIni @_diaB ;

ifinfo(styleName, "Bold") {
  # Loosen from following narrow initials with dots below:
  pos @RehWawAll' lookup _kern150                      @Tooth2wBelowInit ;
  pos @RehWawAll' lookup _kern150 @MarksAny            @Tooth2wBelowInit ;
  pos @RehWawAll' lookup _kern150 @MarksAny @MarksAny  @Tooth2wBelowInit ;
}

  # Leave certain cases alone:
  ignore pos @RehWawTighten                       @RehKernAlefOrOther @_diaB ;                            
  ignore pos @RehWawTighten @MarksAny             @RehKernAlefOrOther @_diaB ;                            
  ignore pos @RehWawTighten @MarksAny @MarksAny   @RehKernAlefOrOther @_diaB ;
  
  ignore pos @RehWawTighten @_diaA               @RehKernOtherMA ;
  ignore pos @RehWawTighten @MarksAny @_diaA     @RehKernOtherMA ;
  
  # Kirghiz-OE (waw-loop) has a different shape:
  ignore pos kirghizoe-ar noon-ar;
  ignore pos kirghizoe-ar yehbarree-ar;
  ignore pos kirghizoe-ar.fina noon-ar;
  ignore pos kirghizoe-ar.fina yehbarree-ar;

  # Otherwise tighten against most things:
  pos @RehWawTighten' lookup _kern_190                @RehKernAlef;
  pos @RehWawTighten' lookup _kern_190 @_diaB         @RehKernAlef;
  pos @RehWawTighten' lookup _kern_190 @_diaB @_diaB  @RehKernAlef;
  
  pos @RehWawTighten' lookup _kern_190                      @RehKernMost;  #@RehKernOther + @RehKernOtherMB
  pos @RehWawTighten' lookup _kern_190 @MarksAny            @RehKernMost;
  pos @RehWawTighten' lookup _kern_190 @MarksAny @MarksAny  @RehKernMost;
  
  ignore pos @RehWawTighten                      @AinLikeInit @_diaB;
  ignore pos @RehWawTighten @MarksAny            @AinLikeInit @_diaB;
  ignore pos @RehWawTighten @MarksAny @MarksAny  @AinLikeInit @_diaB;
  
  pos @RehWawTightenToAin' lookup _kern_215                      @AinLikeInit;
  pos @RehWawTightenToAin' lookup _kern_215 @MarksAny            @AinLikeInit;
  pos @RehWawTightenToAin' lookup _kern_215 @MarksAny @MarksAny  @AinLikeInit;
  
  pos @RehWawTightenToAinX' lookup _kern_290                      @AinLikeInit;
  pos @RehWawTightenToAinX' lookup _kern_290 @MarksAny            @AinLikeInit;
  pos @RehWawTightenToAinX' lookup _kern_290 @MarksAny @MarksAny  @AinLikeInit;
  
  pos @RehWawTightenToAinIsol' lookup _kern_580                      @AinLikeIsol;
  pos @RehWawTightenToAinIsol' lookup _kern_580 @MarksAny            @AinLikeIsol;
  pos @RehWawTightenToAinIsol' lookup _kern_580 @MarksAny @MarksAny  @AinLikeIsol;
    
} RehWawKerning;

lookup LamAlefKerning {
  lookupflag IgnoreMarks;

ifinfo(styleName, "Bold") {
    pos @AlefFinPostLamIni <-30 0 -30 0>  @LamAlefKern;
}
ifinfo(styleName, "Regular") {
    pos @AlefFinPostLamIni <-70 0 -70 0>  @LamAlefKern;
}

} LamAlefKerning;

lookup MiscKerning {
  lookupflag IgnoreMarks;
    pos @AlefForms' lookup _kern70  rreh-ar;
    
    # beh + reh-stroke
    pos @Tooth1hBelow' lookup _kern100  rehStroke-ar.fina;
    pos @Tooth2hBelow' lookup _kern100  rehStroke-ar.fina;  

    pos highhamza-ar' lookup _kern130  @Tooth2wAboveInit;

} MiscKerning;

lookup MiscKerningWDiacs {
  # does not ignore diacritics
  
    # alef-maddah + gaf
    pos @AlefForms' lookup _kern130  madda-ar.small  @GafIsolInit;      # also see shift rules below
    pos @AlefForms' lookup _kern170  madda-ar        @GafIsolInit;
    pos @AlefForms' lookup _kern170  madda-ar        @LamLikeIsolInit;

    # beh-like + something above + reh-tah
    pos @Tooth' lookup _kern140  @MarksAbove  rehTwodotshorizontalaboveTahabove-ar.fina;  # also see shift rule below
    
    # AE + kaf
    pos ae-ar'      lookup _kern_300          @KafLikeInit;
    pos ae-ar'      lookup _kern_300  @_diaB  @KafLikeInit;
    pos ae-ar.fina' lookup _kern_300          @KafLikeInit;
    pos ae-ar.fina' lookup _kern_300  @_diaB  @KafLikeInit;
} MiscKerningWDiacs;

# Note that shifting in RTL works the opposite in OpenType compared to Graphite.

#********
# Kashida kerning for yeh/peh forms, etc.

# When we kern the kashida, we shift it a bit further to the right, just to avoid it hanging too far
# off the left edge of the following glyph. Not really necessary, but a precaution.
# (In Graphite we do this by splitting the kerning between the kashida and the following glyph.)

# Using separate lookups for initial-medial and medial-medial allows us to handle a chain of these.

lookup _kkern_40 {
  pos absAutoKashida     <-20 0  -40 0>;
} _kkern_40;

lookup _kkern_60 {
  pos absAutoKashida     <-30 0  -60 0>;
} _kkern_60;

lookup _kkern_80 {
  pos absAutoKashida     <-40 0  -80 0>;
} _kkern_80;

lookup _kkern_100 {
  pos absAutoKashida     <-50 0  -100 0>;
} _kkern_100;

lookup _kkern_120 {
  pos absAutoKashida     <-60 0  -120 0>;
} _kkern_120;

lookup _kkern_140 {
  pos absAutoKashida     <-70 0  -140 0>;
} _kkern_140;

lookup _kkern_160 {
  pos absAutoKashida     <-80 0  -160 0>;
} _kkern_160;

lookup _kkern_180 {
  pos absAutoKashida     <-90 0  -180 0>;
} _kkern_180;

lookup _kkern_240 {
  pos absAutoKashida     <-120 0  -240 0>;
} _kkern_240;


lookup ToothKashidaKerningIM {
  lookupflag IgnoreMarks;
    ignore pos @Tooth2wwBelowInit absAutoKashida  @Tooth2wwBelowMedi;  # doesn't need kerning
ifinfo(styleName, "Regular") {
    pos @Tooth3wBelowInit  absAutoKashida' lookup _kkern_60   absAutoKashida   @Tooth3wBelowMedi;  # REGULAR ONLY
}
    pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_140  absAutoKashida   @Tooth3wBelowMedi;
    pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_80   @Tooth2wBelowMedi;
    
ifinfo(styleName, "Bold") {
    pos @Tooth2wBelowMedi absAutoKashida' lookup _kkern_60   @Tooth2wBelowMedi;  # BOLD
    pos @Tooth2wAboveMedi absAutoKashida' lookup _kkern_60   @Tooth2wAboveMedi;  # BOLD
    
    pos @Tooth2wAboveInit'  absAutoKashida' lookup _kkern_100  @FehQaf2wAboveMedi;  # BOLD
    pos @FehQaf2wAboveInit' absAutoKashida' lookup _kkern_60   @FehQaf2wAboveMedi;  # BOLD    
    
    pos teheh-ar.init' lookup _kern100  teheh-ar.medi;
    
    # teh + waw w/ something above
    pos @Tooth2wAboveInit' lookup _kern90  @WawLikeFinaMA;  # no kashida
    
    # kaf + teh
    pos @KafLikeInit' lookup _kern100  @Tooth2wAboveMedi;   # no kashida
    
    pos alef-ar.fina.postLamIni'  lookup _kern90  @Tooth2wAboveInit;
    pos alef-ar.fina.postLamMed'  lookup _kern90  @Tooth2wAboveInit;
}

} ToothKashidaKerningIM;

lookup ToothKashidaKerningMM {
  lookupflag IgnoreMarks;
ifinfo(styleName, "Regular") {
    pos @Tooth3wBelowMedi  absAutoKashida' lookup _kkern_60   absAutoKashida   @Tooth3wBelowMedi;  # REGULAR ONLY
}
    pos @Tooth2wBelowMedi  absAutoKashida' lookup _kkern_140  absAutoKashida  @Tooth3wBelowMedi;
    
ifinfo(styleName, "Bold") {
    pos @FehQaf2wAboveMedi' absAutoKashida' lookup _kkern_240  @FehQaf2wAboveMedi;  # BOLD    
}

} ToothKashidaKerningMM;

lookup ToothKashidaKerningIMF {
  lookupflag IgnoreMarks;
    pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_80  @YehLikeFina;
    
    pos @Tooth absAutoKashida' lookup _kkern_100  tehMarbuta-ar.fina;
} ToothKashidaKerningIMF;

lookup MiscKashidaKerning {
  lookupflag IgnoreMarks;
    pos @KafLikeInitMedi   absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
    pos @JeemLikeInitMedi  absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
    pos noon-ar.medi       absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
    
    #pos @Tooth2wBelowRstrk      absAutoKashida' lookup _kkern_180  rehStroke-ar.fina; 
} MiscKashidaKerning;

}  # end of do - kashida positioning lookups


#---  curs feature  ---

lookup cursive_exit_entry {
  lookupflag IgnoreMarks RightToLeft;
  pos cursive @entry @exit;
} cursive_exit_entry;


#---  mark feature  ---

lookup mark_to_base {
  lookupflag 0;
    pos base @diaA  mark @_diaA;
    pos base @diaB  mark @_diaB;
} mark_to_base;

# Override mark positioning in the case of dagger-alef on certain chars:
lookup alef_to_base {
  lookupflag 0;
    pos base @alef  mark @_alef;
} alef_to_base;


lookup mark_to_lig {
  lookupflag 0;
  
    pos ligature @LamAlefLig            @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWaslaLig        @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWavyHAboveLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefWavyHBelowLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefTwoAboveLig    @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
    pos ligature @LamAlefThreeAboveLig  @diaA_1 mark @_diaA    @diaB_1 mark @_diaB
              ligComponent              @diaA_2 mark @_diaA    @diaB_2 mark @_diaB;
} mark_to_lig;


# Use the dia2B AP when you have two diacritics below a lam-alef.
##lookup _mark2_to_base {
##  lookupflag 0;
##    # Class are not expanded recursively, so enumerate them. :-(
##    pos ligature @LamAlefLig             @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
##    pos ligature @LamAlefWaslaLig        @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
##    pos ligature @LamAlefWavyHAboveLig   @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
##    pos ligature @LamAlefWavyHBelowLig   @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
##    pos ligature @LamAlefTwoAboveLig     @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
##    pos ligature @LamAlefThreeAboveLig   @diaB_1 mark @_diaB  ligComponent @dia2B mark @_diaB;
##} _mark2_to_base;

##lookup LamAlefMark2Adjust {
##  lookupflag UseMarkFilteringSet @MarksBelow;
##    pos @AllLamAlefLig  @MarksBelow  @MarksBelow' lookup _mark2_to_base;
##} LamAlefMark2Adjust;


#---  mkmk feature  ---

@MarkFilter_diaA = [@diaA_MarkBase @_diaA];
lookup mark_to_mark_above {
  lookupflag UseMarkFilteringSet @MarkFilter_diaA;
  pos mark @diaA_MarkBase mark @_diaA;
} mark_to_mark_above;

@MarkFilter_diaB = [@diaB_MarkBase @_diaB];
lookup mark_to_mark_below {
  lookupflag UseMarkFilteringSet @MarkFilter_diaB;
  pos mark @diaB_MarkBase mark @_diaB;
} mark_to_mark_below;


#---  kern feature (cont'd)  ---

do if opt("nokern") != "yes";
{   # more kerning substitutions

# These need to go after mark attachment.

lookup DiacShifting {

  # alef + takhallus (name marker)
  pos @AlefForms  hehgoal-ar.init  takhallusabove-ar' <-350 300  0 0>;
  pos @AlefForms  tehMarbuta-ar    takhallusabove-ar' <   0 150  0 0>;
  pos @AlefForms  @HehLikeIsolate  takhallusabove-ar' <   0 320  0 0>;
ifinfo(styleName, "Bold") {
  pos @AlefDigit  tehMarbuta-ar    takhallusabove-ar' < 550 220  0 0>;  # BOLD
  pos @AlefDigit  @HehLikeIsolate  takhallusabove-ar' < 550 430  0 0>;  # BOLD
}
ifinfo(styleName, "Regular") {
  pos @AlefDigit  tehMarbuta-ar    takhallusabove-ar' < 450 220  0 0>;  # REGULAR
  pos @AlefDigit  @HehLikeIsolate  takhallusabove-ar' < 350 430  0 0>;  # REGULAR
}

  # beh + kasra +jeem/ain/yeh-barree finals
ifinfo(styleName, "Bold") {
  pos @ToothRing  kasra-ar'    <  0   75 0 0>  @YehBarreeFina;  # special case - BOLD
  pos @ToothRing  kasratan-ar' <120 -450 0 0>  @YehBarreeFina;  # special case - BOLD
}
ifinfo(styleName, "Regular") {
  ignore pos @ToothRing  kasra-ar'                @YehBarreeFina;  # okay with yeh-barree - REGULAR
  pos @ToothRing     kasratan-ar' <120  180 0 0>  @YehBarreeFina;  # special case - REGULAR
}
  
ifinfo(styleName, "Bold") {
  pos @Tooth1hBelow  kasra-ar'    <  0 -300 0 0>  @YehBarreeFina;  # BOLD
  pos @Tooth1hBelow  kasratan-ar' <100 -200 0 0>  @YehBarreeFina;  # BOLD
}
ifinfo(styleName, "Regular") {
  pos @Tooth1hBelow  kasra-ar'    <  0  145 0 0>  @YehBarreeFina;  # REGULAR
  pos @Tooth1hBelow  kasratan-ar' <200  290 0 0>  @YehBarreeFina;  # REGULAR
}
  pos @Tooth2hBelow  kasra-ar'    <  0 -200 0 0>  @YehBarreeFina;
  pos @Tooth2hBelow  kasratan-ar' <  0 -100 0 0>  @YehBarreeFina;
  pos @Tooth0Below   kasratan-ar' <  0  150 0 0>  @YehBarreeFina;
  
ifinfo(styleName, "Bold") {
  pos @Tooth1hBelow  kasra-ar'    < 10 -300 0 0>  @JeemAinLikeFina;  # BOLD
}
ifinfo(styleName, "Regular") {
  pos @Tooth1hBelow  kasra-ar'    <120  150 0 0>  @JeemAinLikeFina;  # REGULAR
}
  pos @Tooth1hBelow  kasratan-ar' <100   30 0 0>  @JeemAinLikeFina;
  pos @Tooth2hBelow  kasra-ar'    <  0 -100 0 0>  @JeemAinLikeFina;
  pos @Tooth2hBelow  kasratan-ar' < 50    0 0 0>  @JeemAinLikeFina;
  pos @Tooth0Below   kasratan-ar' <100    0 0 0>  @JeemAinLikeFina;
  
  pos @AlefForms  madda-ar.small' < 20 0 0 0>  @GafIsolInit;  # also see kern rules above
  pos @AlefForms  madda-ar'       < 90 0 0 0>  @GafIsolInit;
  pos @AlefForms  madda-ar'       < 70 0 0 0>  @LamLikeIsolInit;
  
  pos @Tooth  @MarksAbove' < 50 0 0 0>  rehTwodotshorizontalaboveTahabove-ar.fina;  # also see kern rule above
  
} DiacShifting;

} # end of kerning substitutions


#**********************************
#  FEATURES
#**********************************

#--- Substitution ---

feature rtlm {  # Right-To-Left Mirrored Forms
    lookup Mirror;
} rtlm ;


feature ccmp {  # Glyph Composition/Decomposition
    # Same for latin & arabic:
        lookup SmallMaddah;
        lookup FontCheck1;
        lookup FontCheck2;
        lookup ReorderMaddaVowel1;
        lookup ReorderMaddaVowel2;            
    script arab;
        lookup DecomposeForColor;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
      
    script latn;
        lookup KasraHigh;
} ccmp ;

feature fina {  # Terminal Forms
    script arab;
      lookup ltrFina;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} fina ;

feature medi {  # Medial Forms
    script arab;
      lookup ltrMedi;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} medi ;

feature init {  # Initial Forms
    script arab;
      lookup ltrInit;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} init ;


feature rlig {  # Required Ligatures
    # lookup ShaddaKasraLigatures (where needed) has been moved to liga so it runs after cv62
    script arab;
        lookup AllahLigatures;
        #lookup LamAlefLigatures; -- move to liga to go after ShaddaKasraLigatures
        lookup ComposeLowHamzaAbove;
        lookup HamzaLigatures;
        lookup ShaddaLigatures;
        lookup ShaddaAlefLigatures;
        #lookup ShaddaKasraLigatures; -- move to liga so it runs after cv62
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} rlig ;


feature calt {  # Contextual Alternates
    script arab;
        #lookup SignWithDigits;  # moved to liga feature
        
do if opt("nokern") != "yes";
{   # start of kerning substitutions
        lookup ToothKashidasIM;
        lookup ToothKashidasMM;
        lookup ToothKashidasIMF;
        lookup MiscKashidas;
        lookup MarkKashidas;
}   # end of kerning substitutions

        lookup WideKashida;

      language dflt ;   # Must have a lookup here for TypeTuner to work.
        lookup dfltCALT ;
      language KUR ; # Kurdish
        lookup KurdishCALT ;
      language RHG ; #Rohingya
        lookup RohingyaCALT ;
      language SND ; # Sindhi
        lookup SindhiCALT ;
      language URD ; # Urdu
        lookup UrduCALT ;
      language WLF ; # Wolof
        lookup WolofCALT ;
      language KIR ; # Kirghiz
        lookup KirghizCALT ;
} calt ;


feature salt {  # Stylistic Alternates
    script arab;
        lookup AyahAlternates;
      # Force other languages to include Arabic script lookups
      language KIR ;  # Kirghiz
      language KUR ;  # Kurdish
      language RHG ;  # Rohingya
      language SND ;  # Sindhi
      language URD ;  # Urdu
      language WLF ;  # Wolof
} salt ;

#--- Character Variants ---

feature cv12 {  # Character Variant 12
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Dal"       ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Alternate" ; };
    } ;
    script arab;
        lookup DalAlternate;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      # language WLF;  -- but not this one since we enable it in the WolofCALT
} cv12 ;

# Use meem alternates for languages other than Sindhi
feature cv44 {  # Character Variant 44
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Meem"       ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"; };
    } ;
    script arab;
        lookup MeemAlternate;
      # Force other languages to include Arabic script lookups
      language URD;  # Urdu
      language KIR;  # Kirghiz
      language KUR;  # Kurdish
      language RHG;  # Rohingya
      # language SND; -- but not this one since we enable it in SindhiCALT
      language WLF;  # Wolof
} cv44 ;

feature cv48 {  # Character Variant 48
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Heh"            ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Urdu-style"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Kurdish-style"  ; };
    } ;
    script arab;
      language dflt;  # Default
          lookup HehAlternates;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language SND ;
      language RHG ;
      language URD ;
      language WLF ;
} cv48 ;

feature cv51 {  # Character Variant 51
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Kyrgyz OE" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Loop" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Bar"   ; };
    } ;
    # Same for latin & arabic:
      lookup KirghizOeAlternates;
} cv51 ;

feature cv54 {  # Character Variant 54
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Yeh-Hamza" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Right hamza"   ; };
    } ;
    # Same for latin & arabic:
      lookup YehHamzaAlternates;
} cv54 ;

feature cv60 {  # Character Variant 60
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Maddah"   ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Small"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"    ; };
    } ;
    # Same for latin & arabic:
      lookup MaddahAlternate;
} cv60 ;

feature cv62 {  # Character Variant 62
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Kasra"   ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Default" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Lowered" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Raised"  ; };
    } ;
    # Same for latin & arabic:
      lookup KasraAlternates;
} cv62 ;

feature cv70 {  # Character Variant 70
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Damma"    ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Default" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Filled"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Short"    ; };
    } ;
    # Same for latin & arabic:
      lookup DammaAlternates;
} cv70 ;


feature cv72 {  # Character Variant 72
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Dammatan" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Six-nine" ; };
    } ;
    # Same for latin & arabic:
      lookup DammatanAlternate;
} cv72 ;

feature cv74 {  # Character Variant 74
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Inverted Damma" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Default"        ; };
        ParamUILabelNameID { name 3 1 0x0409 "Hollow"         ; };
    } ;
    # Same for latin & arabic:
      lookup DammaInvertedAlternates;
} cv74 ;

feature cv76 {  # Character Variant 76
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Superscript Alef" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Small"            ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"            ; };
    } ;
    # Same for latin & arabic:
      lookup DaggerAlefToLarge;
} cv76 ;

feature cv78 {  # Character Variant 78
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Sukun"     ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Closed"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Open down" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Open left" ; };
    } ;
    # Same for latin & arabic:
      lookup SukunAlternates;
} cv78 ;

feature cv80 {  # Character Variant 80
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "End of ayah"  ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified A" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified B" ; };
    } ;
    # Same for latin & arabic:
      lookup AyahAlternates;
} cv80 ;

feature cv81 {  # Character Variant 81
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Honorific ligatures" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Calligraphic" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified" ; };
    } ;
    # Same for latin and arabic:
      lookup HonLigAlternates;
} cv81 ;

feature cv82 {  # Character Variant 82
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Eastern digits" ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Standard"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Urdu-style"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Kurdish-style"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Rohingya-style" ; };
    } ;
    # Same for latin & arabic:
      lookup DigitAlternates;  # Latin and Arabic
} cv82 ;

feature cv84 {  # Character Variant 84
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Comma"    ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Upward"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Downward" ; };
    } ;
    # Same for latin & arabic:
      lookup CommaAlternates;
} cv84 ;

feature cv85 {  # Character Variant 85
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Decmal separator"    ; };
       #ParamUILabelNameID { name 3 1 0x0409 "Small reh"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Slash" ; };
    } ;
    # Same for latin & arabic:
      lookup DecimalSepAlternate;
} cv85 ;


# In order for the cv62 lookup to function, we need to execute the ShaddaKasraLigatures in the
# same or later pass as cv62 itself, and it has to execute whether or not cv62 feature is requested,
# so it has to be part of some other feature. In Harfbuzz, we could use either clig or liga, since they
# are pulled in from the Horizontal features that follow shaper-specific features and are, therefore
# executed at the same time as cvXX.

# When rendered with Uniscribe or Word, cv62 is never executed [as of this writing, at any rate].
# But we still need the ShaddaKasraLigatures lookup to fire. Presently Microsoft doesn't 
# fire clig, so liga must be the one to use!

# Finally, the LamAlefLigatures must execute after we've ligated mark combinations, including shadda-kasra,
# or otherwise Word gets confused and ligates shadda-kasra in a sequence such as lam-shadda-alef-kasra.

feature liga {  # Ligatures  -- we use this because liga is done in the same pass as cv62
    # Same for latin & arabic:
        lookup ShaddaKasraLigatures;     # Must be after language-specific CALTs and cv62
        lookup SignWithDigits;
        lookup LamAlefLigatures;         # Must be after all mark ligatures (including cv62)
        lookup AllahAlef;                # Must be after lam-alef lig
} liga ;


#--- Positioning ---

feature kern {  # Kerning
    # Same behavior for latin & arabic:
        lookup SubtendingMarks;
do if opt("nokern") != "yes";
{   # start of kerning positioning
        lookup RehWawKerning1;  # a separate lookup to handle chains
        lookup RehWawKerning;
        lookup LamAlefKerning;
        lookup MiscKerning;
        lookup MiscKerningWDiacs;
        lookup ToothKashidaKerningIM;
        lookup ToothKashidaKerningMM;
        lookup ToothKashidaKerningIMF;
        lookup MiscKashidaKerning;
        # after mark attachment:
        lookup DiacShifting;
}   # end of kerning positioning
} kern ;


feature curs {  # Cursive Positioning
    script arab;
      lookup cursive_exit_entry;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} curs ;

feature mark {  # Mark to base Positioning
    # Same for latin & arabic:
        lookup mark_to_base;
        lookup alef_to_base;
    script arab;
        lookup mark_to_lig;
        #####lookup LamAlefMark2Adjust;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} mark ;


feature mkmk {  # Mark to mark Positioning
    # Same for latin & arabic:
        lookup mark_to_mark_above;
        lookup mark_to_mark_below;
} mkmk ;
