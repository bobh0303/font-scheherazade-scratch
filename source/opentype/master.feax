#**********************************
# This file is part of Scheherazade font family (http://software.sil.org/scheherazade/) 
# and is Copyright (c) 2020 SIL International (http://www.sil.org/),
# with Reserved Font Names "Scheherazade" and "SIL".
#
# This Font Software is licensed under the SIL Open Font License, Version 1.1.
#
# You should have received a copy of the license along with this Font Software.
# If this is not the case, go to (http://scripts.sil.org/OFL) for all the
# details including an FAQ.
#**********************************


#**********************************
#  Language Systems
#**********************************

languagesystem arab dflt ;
languagesystem arab KIR  ;    # Kirghiz
languagesystem arab KUR  ;    # Kurdish
languagesystem arab RHG  ;    # Rohingya -- supported by Harfbuzz
languagesystem arab SND  ;    # Sindhi
languagesystem arab URD  ;    # Urdu
languagesystem arab WLF  ;    # Wolof
languagesystem latn dflt ;

@MarksAbove = [@_diaA] ;
@MarksBelow = [@_diaB] ;
@MarksAny = [@_diaA @_diaB] ;


#**********************************
#  Substitution Lookups
#**********************************

lookup SmallMaddah {
  lookupflag 0 ;
    sub @Maddah by @Maddah.small ;
} SmallMaddah;

lookup DecomposeForColor {
  lookupflag 0 ;
    sub @AlefPlusMark by alef-ar @AlefMark ;
} DecomposeForColor;


lookup _FontCheck1_target {
  lookupflag IgnoreMarks ;
    sub U n k n o w n by O ;
} _FontCheck1_target ;

lookup FontCheck1 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g U' lookup _FontCheck1_target n'  k'  n'  o'  w'  n'  ;
} FontCheck1;

lookup _FontCheck2_target {
  lookupflag IgnoreMarks ;
    sub O by O p e n T y p e ;
} _FontCheck2_target ;

lookup FontCheck2 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g O' lookup _FontCheck2_target ;
} FontCheck2;


lookup Mirror {
  lookupflag IgnoreMarks ;
    sub @cno_rtl by @c_rtl ;
} Mirror;


lookup ltrFina {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol by @DualLinkFina ;
    sub @RightLinkIsol by @RightLinkFina ;
} ltrFina;

lookup ltrMedi {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol by @DualLinkMedi ;
} ltrMedi;

lookup ltrInit {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol by @DualLinkInit ;
} ltrInit;


#********
# Allah "ligature" (implemented by variant forms for glyphs rather than by ligature glyph):

lookup AllahSubs1 {
  lookupflag 0;
  	sub alef-ar      by alef-ar.allah;
  	sub alef-ar.fina by alef-ar.allah.fina;
    sub lam-ar.init  by lam-ar.allah1.init;
    sub lam-ar.medi  by lam-ar.allah1.medi;
} AllahSubs1;

lookup AllahSubs2 {
  lookupflag 0;
    sub lam-ar.medi     by lam-ar.allah2.medi;
    sub heh-ar.fina     by heh-ar.allah.fina;
    sub hehgoal-ar.fina by hehgoal-ar.allah.fina;
} AllahSubs2;

lookup AllahSubs3 {
  lookupflag 0;
    sub lam-ar.medi by lam-ar.allah2.medi shadda-ar alefabove-ar ;  # insert shadda-alef
} AllahSubs3;

lookup AllahLigatures {
  lookupflag 0;
    # Rule 3: alefIso-lam-lam-heh
    sub alef-ar' lookup AllahSubs1
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs3
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub alef-ar' lookup AllahSubs1
        @MarksAny'
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs3
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub alef-ar' lookup AllahSubs1
        @MarksAny' 
        @MarksAny'
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs3
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
        
    # Rule 2: alef-lamInit-lam-shadda-alef-heh
    sub [alef-ar alef-ar.fina]' lookup AllahSubs1
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [alef-ar alef-ar.fina]' lookup AllahSubs1
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [alef-ar alef-ar.fina]' lookup AllahSubs1
        @MarksAny' 
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    # Rule 2: alef-lamInit-lam-alef-shadda-heh
    sub [alef-ar alef-ar.fina]' lookup AllahSubs1
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [alef-ar alef-ar.fina]' lookup AllahSubs1
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [alef-ar alef-ar.fina]' lookup AllahSubs1
        @MarksAny' 
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;

    # Rule 2: lamInit-lam-shadda-alef-heh
    sub [@RightLinkIsol @RightLinkFina]
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@RightLinkIsol @RightLinkFina]
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@RightLinkIsol @RightLinkFina]
        @MarksAny' 
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    # Rule 2: lamInit-lam-alef-shadda-heh
    sub [@RightLinkIsol @RightLinkFina]
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@RightLinkIsol @RightLinkFina]
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@RightLinkIsol @RightLinkFina]
        @MarksAny' 
        @MarksAny' 
        lam-ar.init' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    # Rule 2: lamMedi-lam-shadda-alef-heh
    sub [@DualLinkInit @DualLinkMedi]
        lam-ar.medi' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@DualLinkInit @DualLinkMedi]
        @MarksAny' 
        lam-ar.medi' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@DualLinkInit @DualLinkMedi]
        @MarksAny' 
        @MarksAny' 
        lam-ar.medi' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    # Rule 2: lamMedi-lam-alef-shadda-heh
    sub [@DualLinkInit @DualLinkMedi]
        lam-ar.medi' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@DualLinkInit @DualLinkMedi]
        @MarksAny' 
        lam-ar.medi' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
    sub [@DualLinkInit @DualLinkMedi]
        @MarksAny' 
        @MarksAny' 
        lam-ar.medi' lookup AllahSubs1
        lam-ar.medi' lookup AllahSubs2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        [heh-ar.fina hehgoal-ar.fina]' lookup AllahSubs2;
} AllahLigatures;  

#********
# Lam-Alef Ligatures

# Include in this filter hamzaAbove plus any mark glyphs that should stop any ligation.
# Mark glyphs not included will be skipped over when trying to find a hamzaAbove
@HamzaAboveFilter = [@UTR53_230MCM @UTR53_230other graphemejoinercomb ] ;

# Include in this filter hamzaBelow plus any mark glyphs that should stop any ligation.
# Mark glyphs not included will be skipped over when trying to find a hamzaBelow
@HamzaBelowFilter = [@UTR53_220MCM @UTR53_220other graphemejoinercomb ] ;

lookup _Ligatures_Part1_target {
  lookupflag IgnoreMarks ;
    sub @LamIni by @LamIniBeforeAlef ;
    sub @LamMed by @LamMedBeforeAlef ;
} _Ligatures_Part1_target ;

lookup _Ligatures_Part2a_target {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinAfterLamIni ;
} _Ligatures_Part2a_target ;

lookup _Ligatures_Part2b_target {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinAfterLamMed ;
} _Ligatures_Part2b_target ;

lookup Ligatures {
  lookupflag IgnoreMarks ;
  # Subtable: Ligatures\Part1
    sub [ @LamIni @LamMed ]' lookup _Ligatures_Part1_target @AlefFin ;
  # Subtable: Ligatures\Part2a
    sub @LamIniBeforeAlef @AlefFin' lookup _Ligatures_Part2a_target ;
  # Subtable: Ligatures\Part2b
    sub @LamMedBeforeAlef @AlefFin' lookup _Ligatures_Part2b_target ;
} Ligatures;


#********
# Hamza ligation

lookup ComposeLowHamzaAbove {
  lookupflag UseMarkFilteringSet @HamzaAboveFilter ;
    sub @LowHamzaBase hamzaabove-ar by @LowHamzaComposed ;
} ComposeLowHamzaAbove;


@LigateHamzaMarksFilter = [ hamzaabove-ar @HamzaMarks ] ;
lookup _LigateHamzaMarks {
  lookupflag UseMarkFilteringSet @LigateHamzaMarksFilter ;
    sub hamzaabove-ar @HamzaMarks by @HamzaLigatures ;
} _LigateHamzaMarks;

@HamzaLigatureFilter = [ @HamzaAboveFilter @HamzaMarks shadda-ar ] ;
lookup HamzaLigatures {
  lookupflag UseMarkFilteringSet @HamzaLigatureFilter ;
    # shouldn't ligate hamza + following fatha|damma when hamza preceded by non-MCM 230 because 
    # UTR53 would have moved the fatha|damma to before the 230 marks but could not move the 
    # hamza as it isn't at the beginning of the 230 sequence.
    ignore sub @UTR53_230other               hamzaabove-ar' ;
    ignore sub @UTR53_230other @UTR53_230MCM hamzaabove-ar' ;
    # shouldn't ligate fatha|damma + following hamza when a 230MCM follows the hamza because
    # UTR53 would have moved both hamza and following 230MCM to before the fatha|damma at which
    # point the 230MCM would be between the hamza and the fatha|damma, blocking ligation.
    ignore sub @HamzaMarks'                  hamzaabove-ar @UTR53_230MCM ;
    ignore sub @HamzaMarks'    @UTR53_230MCM hamzaabove-ar @UTR53_230MCM ;
    # otherwise we can ligate in these situations:
    sub hamzaabove-ar' lookup _LigateHamzaMarks                                                   @HamzaMarks ;
    sub hamzaabove-ar' lookup _LigateHamzaMarks @UTR53_230other                                   @HamzaMarks ;
    sub hamzaabove-ar' lookup _LigateHamzaMarks @UTR53_230other [ @UTR53_230other @UTR53_230MCM ] @HamzaMarks ;
    sub @HamzaMarks'   lookup _LigateHamzaMarks                 hamzaabove-ar ;
    sub @HamzaMarks'   lookup _LigateHamzaMarks @UTR53_230MCM   hamzaabove-ar ;
} HamzaLigatures;


#********
# Shadda ligation

# Including graphemejoinercomb allows it to interrupt the ligature formation,
#		otherwise the lookupflag causes it to be ignored.
@ShaddaLigatureFilter = [ @ShaddaMarks @ShaddaKasraMarks shadda-ar graphemejoinercomb ] ;
lookup ShaddaLigatures {
  lookupflag UseMarkFilteringSet @ShaddaLigatureFilter ;
    sub shadda-ar @ShaddaMarks by @ShaddaLigatures ;
    sub @ShaddaMarks shadda-ar by @ShaddaLigatures ;
} ShaddaLigatures;

#********
# Language-specific shaping

lookup RohingyaCALT {
  lookupflag 0 ;
    sub four-persian by four-persian.roh ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @cno_sixNine by @c_sixNine ;
    sub @Kasra by @Kasra_lowered ;
} RohingyaCALT  ;

lookup SindhiCALT {
  lookupflag 0 ;
    #sub heh-ar.medi by heh-ar.knottedHigh.medi ; -- done by HehAlternates
    #sub heh-ar.fina by heh-ar.knottedHigh.fina ;
    #sub heh-ar by heh-ar.knotted ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
##    sub dammatan-ar by dammatan-ar.sixNine ;  # old bug
    sub @Meem by @Meem.sindhi ;
    sub @Kasra by @Kasra_lowered;
} SindhiCALT;

lookup UrduCALT {
  lookupflag 0 ;
    sub four-persian by four-persian.urdu ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
##    sub heh-ar.init by heh-ar.hooked.init ; -- no longer used for Urdu
##    sub heh-ar.medi by heh-ar.hooked.medi ;
##    sub heh-ar.fina by heh-ar.hooked.fina ;
    sub @Kasra by @Kasra_lowered;
} UrduCALT;

lookup WolofCALT {
  lookupflag 0 ;
    sub @cno_loclWLF     by  @c_loclWLF ;
    sub @Damma           by  @Damma_short ;
    sub @Kasra           by  @Kasra_lowered ;
    sub dammainverted-ar by  dammainverted-ar.open ;
} WolofCALT;

lookup KirghizCALT {
	lookupflag 0;
		sub @cno_loclKIR  by  @c_loclKIR;   # yeh-hamza
} KirghizCALT;


#********************
# Reordering of madda: moving it beyond any mark with 0 < ccc < 230
#
# If Harfbuzz is rendering, UTR53 will already have been executed, thus the following will do nothing
# Otherwise, we can't do a lot of reordering but we'll move the madda out past vowels
# in a way that is compatible with UTR53.

@MaddaSkip = [ @UTR53_shadda @UTR53_fixedPos @UTR53_alef @UTR53_220MCM @UTR53_220other ] ;

lookup ReorderMaddaVowel1_target {
  lookupflag 0 ;
    sub @MaddaSkip by @MaddaSkip madda-ar.small ;
} ReorderMaddaVowel1_target ;

lookup ReorderMaddaVowel1 {
  lookupflag 0 ;
    sub madda-ar.small @MaddaSkip' lookup ReorderMaddaVowel1_target ;
} ReorderMaddaVowel1;

lookup ReorderMaddaVowel2_target {
  lookupflag 0 ;
    sub madda-ar.small @MaddaSkip by @MaddaSkip ;
} ReorderMaddaVowel2_target ;

lookup ReorderMaddaVowel2 {
  lookupflag 0 ;
    sub madda-ar.small' lookup ReorderMaddaVowel2_target @MaddaSkip madda-ar.small ;
} ReorderMaddaVowel2;


#********
# Heh alternates

lookup SindhiHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub heh-ar.medi by heh-ar.knottedHigh.medi ;
    sub heh-ar.fina by heh-ar.knottedHigh.fina ;
    sub heh-ar by heh-ar.knotted ;
} SindhiHeh;

lookup KurdishHeh {
  lookupflag IgnoreMarks ;
  # Used only by TypeTuner
    sub heh-ar.fina by heh-ar.knottedHigh.fina ;
    sub heh-ar by heh-ar.knotted ;
} KurdishHeh;

# heh-hook is no longer defined for Urdu; used only for TypeTuner
lookup UrduHeh {
  lookupflag IgnoreMarks ;
    sub heh-ar.init by heh-ar.hooked.init ;
    sub heh-ar.medi by heh-ar.hooked.medi ;
    sub heh-ar.fina by heh-ar.hooked.fina ;
} UrduHeh;


lookup HehAlternates {
  lookupflag IgnoreMarks ;
    #   0=default;         1=Sindhi;                2=Urdu;             3=Kurdish
    sub heh-ar      from [ heh-ar.knotted           heh-ar              heh-ar.knotted ] ;
    sub heh-ar.fina from [ heh-ar.knottedHigh.fina  heh-ar.hooked.fina  heh-ar.knottedHigh.fina ] ;
    sub heh-ar.init from [ heh-ar.init              heh-ar.hooked.init  heh-ar.init ] ;
    sub heh-ar.medi from [ heh-ar.knottedHigh.medi  heh-ar.hooked.medi  heh-ar.medi ] ;
    # In case Kurdish lang has been selected:
    sub heh-ar.knotted          from   [ heh-ar.knotted          heh-ar             heh-ar.knotted          ] ;
    sub heh-ar.knottedHigh.fina from   [ heh-ar.knottedHigh.fina heh-ar.hooked.fina heh-ar.knottedHigh.fina ] ;
} HehAlternates;


#********
# Other alternates

lookup DalAlternate {
  lookupflag IgnoreMarks ;
    sub @DalIso by @DalIso.sen ;
} DalAlternate;

lookup MeemAlternate {
  lookupflag IgnoreMarks ;
    sub @Meem by @Meem.sindhi ;  # also used by Kurdish and Urdu
} MeemAlternate;

# obsolete
#lookup ArabicUAlternate {
#  lookupflag IgnoreMarks ;
#    sub @U by @U.filled ;
#} ArabicUAlternate;

lookup MaddahAlternate {
  lookupflag 0 ;
    sub @Maddah.small by @Maddah ;
} MaddahAlternate;

#TypeTuner lookups:
lookup KasraLow {
  lookupflag 0 ;
    sub @Kasra by @Kasra_lowered;
} KasraLow;

lookup KasraHigh {
  lookupflag 0 ;
    sub @Kasra_lowered by @Kasra;
} KasraHigh;

lookup KasraAlternates {
  lookupflag 0 ;
    # NB: This is writen so it doesn't matter which shadda-kasra behavior is default.
    #   0=default (raised)    1=lowered       2=raised
    sub @Kasra_lowered from [ @Kasra_lowered  @Kasra ];
    sub @Kasra         from [ @Kasra_lowered  @Kasra ];
} KasraAlternates;

lookup DammaAlternates {
  lookupflag 0 ;
    sub @Damma        from [ @Damma_filled  @Damma_short ];
    sub @Damma_filled from [ @Damma_filled  @Damma_short ];
    sub @Damma_short  from [ @Damma_filled  @Damma_short ];
} DammaAlternates;

lookup DammatanAlternate {
  lookupflag 0 ;
    sub @Dammatan by @Dammatan.sixNine ;
} DammatanAlternate;

lookup DammaInvertedAlternates {
  lookupflag 0 ;
  	#   0=default (filled);              1=hollow;              2=filled
    sub dammainverted-ar      from [ dammainverted-ar.open  dammainverted-ar ];
    sub dammainverted-ar.open from [ dammainverted-ar.open  dammainverted-ar ];
} DammaInvertedAlternates;

lookup _DaggerAlefToLarge_target {
  lookupflag 0 ;
  	# 0=default;            1=large;            2=small
  	sub alefabove-ar from [ alefabove-ar.large  alefabove-ar ];
    #sub alefabove-ar by alefabove-ar.large ;
} _DaggerAlefToLarge_target ;

lookup DaggerAlefToLarge {
  lookupflag 0 ;
    sub @TakesLargeDaggerAlef alefabove-ar' lookup _DaggerAlefToLarge_target ;
} DaggerAlefToLarge;

lookup SukunAlternates {
  lookupflag 0 ;
    sub sukun-ar from [ sukun-ar.downOpen sukun-ar.leftOpen ] ;
} SukunAlternates;

lookup AyahAlternates {
  lookupflag 0 ;
    sub endofayah-ar   from [ endofayah-ar.alt    endofayah-ar.altB ] ;
    sub endofayah-ar.2 from [ endofayah-ar.alt.2  endofayah-ar.altB.2 ] ;
    sub endofayah-ar.3 from [ endofayah-ar.alt.3  endofayah-ar.altB.3 ] ;
} AyahAlternates;

lookup KirghizOeAlternates {
	lookupflag 0;
		sub kirghizoe-ar       by  kirghizoe-ar.bar;
		sub kirghizoe-ar.fina  by  kirghizoe-ar.bar.fina;
} KirghizOeAlternates;

lookup YehHamzaAlternates {
	lookupflag 0;
		sub yehHamzaabove-ar       by  yehHamzaabove-ar.loclKIR;
		#sub yehHamzaabove-ar.init  by  yehHamzaabove-ar.loclKIR.init;
		#sub yehHamzaabove-ar.medi  by  yehHamzaabove-ar.loclKIR.medi;
		sub yehHamzaabove-ar.fina  by  yehHamzaabove-ar.loclKIR.fina;
} YehHamzaAlternates;

#********
# Digit alternates

# TypeTuner lookups:

lookup DigitSindhi {
  lookupflag 0;
    sub four-persian.urdu   by four-persian;
    sub four-persian.roh    by four-persian;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitSindhi;

lookup DigitUrdu {
  lookupflag 0;
    sub four-persian        by four-persian.urdu;
    sub four-persian.roh    by four-persian.urdu;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitUrdu;

lookup DigitKurdish {
  lookupflag 0;
    sub four-persian.urdu   by four-persian;
    sub four-persian.roh    by four-persian;
    sub six-persian.urdu    by six-persian;
    sub seven-persian.urdu  by seven-persian;
} DigitKurdish;

lookup DigitRohingya {
    sub four-persian        by four-persian.roh;
    sub four-persian.urdu   by four-persian.roh;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitRohingya;

@FourPersian = [ four-persian  four-persian.medium four-persian.small ];
@FourPersianUrdu = [ four-persian.urdu  four-persian.urdu.medium four-persian.urdu.small ];
@FourPersianRoh = [ four-persian.roh  four-persian.roh.medium four-persian.roh.small ];

# Only used for cv82, not language-specific modifications:
# We include the Kurdish forms as a place holder for value 3, even though they are not offered as a supported value.
# They are simply the standard Persian forms.
lookup DigitAlternates {
  lookupflag 0 ;        #        1 = Sindhi-style     2 = Urdu-style       3 = Kurdish-style   4 = Rohingya-style
    sub four-persian       from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub four-persian.urdu  from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub four-persian.roh   from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub six-persian        from [six-persian.urdu     six-persian.urdu     six-persian         six-persian.urdu  ];
    sub six-persian.urdu   from [six-persian.urdu     six-persian.urdu     six-persian         six-persian.urdu  ];
    sub seven-persian      from [seven-persian.urdu   seven-persian.urdu   seven-persian       seven-persian.urdu];
    sub seven-persian.urdu from [seven-persian.urdu   seven-persian.urdu   seven-persian       seven-persian.urdu];
} DigitAlternates;

lookup CommaAlternates {
  lookupflag IgnoreMarks ;
    sub comma-ar by comma-ar.downward ;
    sub semicolon-ar by semicolon-ar.downward ;
} CommaAlternates;

#--- OBSOLETE HACKS ---
#lookup JehHack {
#  lookupflag IgnoreMarks ;
#    sub @Jeh by @Jeh.dotHat ;
#} JehHack;

#lookup HeadOfKhahHack {
#  lookupflag 0 ;
#    sub hahabove-ar by marksidewaysnoonghunna-ar ;
#} HeadOfKhahHack;
#----------------------


#********
# Shadda+kasra handling

lookup ShaddaKasraLigatures {
  lookupflag MarkAttachmentType @ShaddaLigatureParts;
    sub @ShaddaKasraMarks                    shadda-ar  by  @ShaddaKasraLigatures ;
    sub @ShaddaKasraMarks graphemejoinercomb shadda-ar  by  @ShaddaKasraLigatures ;
    sub shadda-ar                    @ShaddaKasraMarks  by  @ShaddaKasraLigatures ;
    sub shadda-ar graphemejoinercomb @ShaddaKasraMarks  by  @ShaddaKasraLigatures ;
} ShaddaKasraLigatures;


#********
# Subtending mark digits

# Keep after cv82

lookup SignWith_4digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_4 by @c_4 ;
} SignWith_4digits_target ;

lookup SignWith_3digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_3 by @c_3 ;
} SignWith_3digits_target ;

lookup SignWith_2digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_2 by @c_2 ;
} SignWith_2digits_target ;

lookup SignDigits_ToMedium_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnyMedium ;
} SignDigits_ToMedium_target ;

lookup SignDigits_ToSmall_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnySmall ;
} SignDigits_ToSmall_target ;

# Keep after cv82, so that the right digit alternates are already selected by now:
lookup SignWithDigits {
  lookupflag IgnoreMarks ;
  # Uniscribe or HarfBuzz 'latn'
    sub [ year-ar samvat-ar pagenumber-ar numbermark-ar ]' lookup SignWith_4digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ number-ar year-ar samvat-ar pagenumber-ar numbermark-ar ]' lookup SignWith_3digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_3digits_target 
        @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target ;
    sub [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_2digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]
        @DigitsAny' lookup SignDigits_ToMedium_target ;
  # HarfBuzz 'arab'
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ year-ar samvat-ar pagenumber-ar numbermark-ar ]' lookup SignWith_4digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar pagenumber-ar numbermark-ar ]' lookup SignWith_3digits_target ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  
        [ endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_3digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_2digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ] ;
} SignWithDigits;

#********
# Kashida insertion to handle collision avoidance

#	(cTooth3wBelowInit cTooth3wBelowMedi cTooth2wBelowInit cTooth2wBelowMedi)  _  _  
#		>  @1 g_abs_auto_kashida:MF g_abs_auto_kashida:MF
#		/  _ MARKS _ _ cTooth3wBelowMedi=MF;

#	(cTooth3wBelowInit cTooth3wBelowMedi)  _  >  @1 g_abs_auto_kashida:F
#		/  _ MARKS _ cYehLikeFina=F;

#	(cTooth2wBelowInit cTooth3wBelowInit)  _  >  @1 g_abs_auto_kashida:MF / _ MARKS _ (cTooth2wBelowMedi cYehLikeFina)=MF;

#####@PostTooth2wKashida = [ @Tooth2wBelowMedi @YehLikeFina ];
@Tooth3wBelowIM = [ @Tooth3wBelowInit @Tooth3wBelowMedi ];
@Tooth2wBelowIM = [ @Tooth2wBelowInit @Tooth2wBelowMedi ];
@Tooth2w3wBelowInit = [ @Tooth2wBelowInit @Tooth3wBelowInit ];
@Tooth2w3wBelowMedi = [ @Tooth2wBelowMedi @Tooth3wBelowMedi ];
@Tooth2w3wBelow = [ @Tooth2wBelowInit @Tooth2wBelowMedi @Tooth3wBelowInit @Tooth3wBelowMedi ];

# When the class expansion bug gets fixed, replace the small classes with the bigger ones.
lookup _InsertKashida {
	# all tooth forms:
	sub @Tooth0Below        by  @Tooth0Below        absAutoKashida;
	sub @Tooth1hBelow       by  @Tooth1hBelow       absAutoKashida;
	sub @Tooth2hBelow       by  @Tooth2hBelow       absAutoKashida;
#	sub @Tooth2wAboveInit   by  @Tooth2wAboveInit   absAutoKashida;
#	sub @Tooth2wAboveMedi   by  @Tooth2wAboveMedi   absAutoKashida;
#	sub @Tooth2wBelowRstrk  by  @Tooth2wBelowRstrk  absAutoKashida;
#	sub @Tooth2wBelowMedi   by  @Tooth2wBelowMedi   absAutoKashida;
#	sub @Tooth2w3wBelow     by  @Tooth2w3wBelow     absAutoKashida;
#	sub @Tooth2wwAboveInit  by  @Tooth2wwAboveInit  absAutoKashida;  # @Tooth2wwAboveInitMedi
#	sub @Tooth2wwAboveMedi  by  @Tooth2wwAboveMedi  absAutoKashida;  # @Tooth2wwAboveInitMedi
	sub @FehQaf2wAboveInit  by  @FehQaf2wAboveInit  absAutoKashida;
	sub @FehQaf2wAboveMedi  by  @FehQaf2wAboveMedi  absAutoKashida;
	sub @KafLikeInit        by  @KafLikeInit        absAutoKashida;  # @KafLikeInitMedi
	sub @KafLikeMedi        by  @KafLikeMedi        absAutoKashida;  # @KafLikeInitMedi
	sub @JeemLikeInit       by  @JeemLikeInit       absAutoKashida;  # @JeemLikeInitMedi
	sub @JeemLikeMedi       by  @JeemLikeMedi       absAutoKashida;  # @JeemLikeInitMedi
	sub noon-ar.medi        by  noon-ar.medi        absAutoKashida;
} _InsertKashida;

lookup _Insert2Kashidas {
	sub @Tooth2w3wBelow  by  @Tooth2w3wBelow  absAutoKashida  absAutoKashida;
} _Insert2Kashidas;

# Using separate lookups for initial-medial and medial-medial allows us to handle a chain of these.

lookup ToothKashidasIM {  # initial + medial
	lookupflag IgnoreMarks;
		sub @Tooth2w3wBelowInit' lookup _Insert2Kashidas  @Tooth3wBelowMedi;
		sub @Tooth2w3wBelowInit' lookup _InsertKashida    @Tooth2wBelowMedi;
		
		sub tehTehabove-ar.init' lookup _InsertKashida    @Tooth2wAboveMedi;
		sub @Tooth2wwAboveInit'  lookup _InsertKashida    @Tooth2wwAboveMedi;
		
		# also qaf is similar to an initial (high) tooth
ifinfo(styleName, "Bold") {
		sub @Tooth2wAboveInit'   lookup _InsertKashida    @FehQaf2wAboveMedi;  # BOLD
		sub @FehQaf2wAboveInit'  lookup _InsertKashida    @FehQaf2wAboveMedi;  # BOLD
}

} ToothKashidasIM;

lookup ToothKashidasMM {  # medial + medial
	lookupflag IgnoreMarks;		
		sub @Tooth2w3wBelowMedi' lookup _Insert2Kashidas  @Tooth3wBelowMedi;
		# 2w + 2w doesn't need a kashida

		sub tehTehabove-ar.medi' lookup _InsertKashida    @Tooth2wAboveMedi;
		sub @Tooth2wwAboveMedi'  lookup _InsertKashida    @Tooth2wwAboveMedi;

ifinfo(styleName, "Bold") {
  	sub @Tooth2wBelowMedi'   lookup _InsertKashida    @Tooth2wBelowMedi;  # BOLD
		sub @Tooth2wAboveMedi'   lookup _InsertKashida    @Tooth2wAboveMedi;  # BOLD
		
		sub @FehQaf2wAboveMedi'  lookup _InsertKashida    @FehQaf2wAboveMedi;  # BOLD
}
		
} ToothKashidasMM;

lookup ToothKashidasIMF {  #initial/medial + final
	lookupflag IgnoreMarks;
		sub @Tooth2w3wBelow' lookup _InsertKashida  @YehLikeFina;
} ToothKashidasIMF;

lookup MiscKashidas {
	lookupflag IgnoreMarks;
		sub @KafLikeInitMedi'  lookup _InsertKashida  @RnoonLikeNarrow;
		sub @JeemLikeInitMedi' lookup _InsertKashida  @RnoonLikeNarrow;
		sub noon-ar.medi'      lookup _InsertKashida  @RnoonLikeNarrow;
		
		sub @Tooth2wBelowRstrk' lookup _InsertKashida  rehStroke-ar.fina;  # no kerning needed
} MiscKashidas;

# kashidas needed due to colliding marks
lookup MarkKashidas {
		# Add kashida when upper diacritics are next to each other.
		# Note that we should ideally break this into separate rules to handle medial-medial separately, but I'm lazy.
		ignore sub @Tooth alefabove-ar  @Tooth @MarksAbove;  # dagger-alef doesn't need kashida
		ignore sub @Tooth @MarksAbove   @Tooth alefabove-ar;
		sub @Tooth' lookup _InsertKashida  @MarksAbove  @Tooth  @MarksAbove;
		
		sub @Tooth' lookup _InsertKashida  @MarksAbove  tehMarbuta-ar.fina;
} MarkKashidas;


#**********************************
#  Positioning Lookups
#**********************************

lookup LamAlefConnection {
	lookupflag IgnoreMarks RightToLeft;
  pos cursive @entry @exit;
} LamAlefConnection;

lookup mark_to_base {
  lookupflag 0;
  pos base @diaA mark @_diaA;
  pos base @diaB mark @_diaB;
} mark_to_base;

lookup alef_to_base {
  lookupflag 0;
  pos base @alef mark @_alef;
} alef_to_base;

lookup mark2_to_base {
  lookupflag 0;
  pos base @dia2B mark @_diaB;
} mark2_to_base;

@MarkFilter_diaA = [@diaA_MarkBase @_diaA];
lookup mark_to_mark_above {
  lookupflag UseMarkFilteringSet @MarkFilter_diaA;
  pos mark @diaA_MarkBase mark @_diaA;
} mark_to_mark_above;

@MarkFilter_diaB = [@diaB_MarkBase @_diaB];
lookup mark_to_mark_below {
  lookupflag UseMarkFilteringSet @MarkFilter_diaB;
  pos mark @diaB_MarkBase mark @_diaB;
} mark_to_mark_below;

#********
# Subtending mark positioning

lookup SubtendingMarks {
  lookupflag IgnoreMarks ;
    # This code is taken from Harmattan.
    # In Graphite we use mark attachment rules. However, in OpenType positioning digits on 
    # subtending marks has to be done with adjustments rather than attachment since for some 
    # engines the digits will ordered *before* the subtending mark.
    
    # Additionally, the adjustment value records depend on font face (bold vs regular). Therefore
    # we use feax extentions to calculate the value records based on glyph advancewidths and digit AP coordinates.
    
    # In each "do" template, the first rule is ordered for Uniscribe or HarfBuzz 'latin', the second for HarfBuzz 'arab'
    
    # U+06DD End of Ayah
    do let w = -ADVx("zero.small"); let x1 = APx("endofayah-ar.3", "digitR") - ADVx("endofayah-ar.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos @AyahAny @DigitsAnySmall' <$x1 0 $w 0>   @DigitsAnySmall' <$x2 0 $w 0>   @DigitsAnySmall' <$x3 0 $w 0> ;
        pos          @DigitsAnySmall' <$x3 0 $w 0>   @DigitsAnySmall' <$x2 0 $w 0>   @DigitsAnySmall' <$x1 0 $w 0>  @AyahAny ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("endofayah-ar.2", "digitR") - ADVx("endofayah-ar.2"); let x2 = x1 - w; 
    {
        pos @AyahAny @DigitsAnyMedium' <$x1 0 $w 0>  @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos          @DigitsAnyMedium' <$x2 0 $w 0>  @DigitsAnyMedium' <$x1 0 $w 0>  @AyahAny ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("endofayah-ar", "digitR") - ADVx("endofayah-ar");
    {
        pos @AyahAny @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos          @DigitsAnyMedium' <$x1 0 $w 0> @AyahAny ;
    }

    # U+0600 Number sign
    do let w = -ADVx("zero.medium"); let x1 = APx("number-ar.3", "digitR") - ADVx("number-ar.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos number-ar.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> number-ar.3 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("number-ar.2", "digitR") - ADVx("number-ar.2"); let x2 = x1 - w;
    {
        pos number-ar.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> number-ar.2 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("number-ar", "digitR") - ADVx("number-ar"); 
    {
        pos number-ar   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x1 0 $w 0> number-ar ;
    }
    
    # U+0601 Year sign
    do let w = -ADVx("zero.medium"); let x1 = APx("year-ar.4", "digitR") - ADVx("year-ar.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos year-ar.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> year-ar.4 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("year-ar.3", "digitR") - ADVx("year-ar.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos year-ar.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> year-ar.3 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("year-ar.2", "digitR") - ADVx("year-ar.2"); let x2 = x1 - w;
    {
        pos year-ar.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> year-ar.2 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("year-ar", "digitR") - ADVx("year-ar"); 
    {
        pos year-ar   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos           @DigitsAnyMedium' <$x1 0 $w 0> year-ar ;
    }
    
    # U+0602 Footnote Marker
    do let w = -ADVx("zero.medium"); let x1 = APx("footnotemarker-ar.2", "digitR") - ADVx("footnotemarker-ar.2"); let x2 = x1 - w;
    {
        pos footnotemarker-ar.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos                     @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> footnotemarker-ar.2 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("footnotemarker-ar", "digitR") - ADVx("footnotemarker-ar"); 
    {
        pos footnotemarker-ar   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos                     @DigitsAnyMedium' <$x1 0 $w 0> footnotemarker-ar ;
    }
    
    # U+0603 Page Number
    do let w = -ADVx("zero.medium"); let x1 = APx("pagenumber-ar.4", "digitR") - ADVx("pagenumber-ar.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos pagenumber-ar.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0>;
        pos                 @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> pagenumber-ar.4 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("pagenumber-ar.3", "digitR") - ADVx("pagenumber-ar.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos pagenumber-ar.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> pagenumber-ar.3 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("pagenumber-ar.2", "digitR") - ADVx("pagenumber-ar.2"); let x2 = x1 - w;
    {
        pos pagenumber-ar.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> pagenumber-ar.2 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("pagenumber-ar", "digitR") - ADVx("pagenumber-ar"); 
    {
        pos pagenumber-ar   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x1 0 $w 0> pagenumber-ar ;
    }
    
    # U+0604 Samvat sign
    do let w = -ADVx("zero.medium"); let x1 = APx("samvat-ar.4", "digitR") - ADVx("samvat-ar.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos samvat-ar.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0>;
        pos             @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> samvat-ar.4 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("samvat-ar.3", "digitR") - ADVx("samvat-ar.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos samvat-ar.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> samvat-ar.3 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("samvat-ar.2", "digitR") - ADVx("samvat-ar.2"); let x2 = x1 - w;
    {
        pos samvat-ar.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> samvat-ar.2 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("samvat-ar", "digitR") - ADVx("samvat-ar"); 
    {
        pos samvat-ar   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos             @DigitsAnyMedium' <$x1 0 $w 0> samvat-ar ;
    }
    
    # U+0605 Number mark
    do let w = -ADVx("zero.medium"); let x1 = APx("numbermark-ar.4", "digitR") - ADVx("numbermark-ar.4"); let x2 = x1 - w; let x3 = x2 - w; let x4 = x3 - w;
    {
        pos numbermark-ar.4 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x4 0 $w 0>;
        pos                 @DigitsAnyMedium' <$x4 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> numbermark-ar.4 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("numbermark-ar.3", "digitR") - ADVx("numbermark-ar.3"); let x2 = x1 - w; let x3 = x2 - w;
    {
        pos numbermark-ar.3 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x3 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x3 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> numbermark-ar.3 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("numbermark-ar.2", "digitR") - ADVx("numbermark-ar.2"); let x2 = x1 - w;
    {
        pos numbermark-ar.2 @DigitsAnyMedium' <$x1 0 $w 0> @DigitsAnyMedium' <$x2 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x2 0 $w 0> @DigitsAnyMedium' <$x1 0 $w 0> numbermark-ar.2 ;
    }
    do let w = -ADVx("zero.medium"); let x1 = APx("numbermark-ar", "digitR") - ADVx("numbermark-ar"); 
    {
        pos numbermark-ar   @DigitsAnyMedium' <$x1 0 $w 0> ;
        pos                 @DigitsAnyMedium' <$x1 0 $w 0> numbermark-ar ;
    }

} SubtendingMarks;


#********
# Kerning for collision avoidance

@RehWawTightenAll = [@RehWawTighten @RehWawTightenMore];
@RehKernAlefOrOther = [@RehKernAlef @RehKernOther];
@RehKernAlefOrMB = [@RehKernAlef @RehKernOtherMB];
@RehKernMost = [@RehKernOther @RehKernOtherMB];

lookup _kern50 {
  pos @RehWawAll <50 0  50 0>;
} _kern50;

lookup _kern70 {
  pos @RehWawAll <70 0  70 0>;
} _kern70;

lookup _kern100 {
  pos @Tooth1hBelow <100 0  100 0>;
  pos @Tooth2hBelow <100 0  100 0>;
  pos teheh-ar.init <100 0  100 0>;
} _kern100;

lookup _kern130 {
  pos @RehWawAll      <130 0  130 0>;
  pos alef-ar         <130 0  130 0>;
  pos @ToothPlusAbove <130 0  130 0>;
} _kern130;

lookup _kern140 {
  pos @Tooth  <140 0  140 0>;
} _kern140;

lookup _kern170 {
  pos @RehWawAll         <170 0  170 0>;
  pos alef-ar            <170 0  170 0>;
  pos @Tooth2wBelowRstrk <170 0  170 0>;
} _kern170;

lookup _kern215 {
  pos @RehWawAll <215 0  215 0>;
} _kern215;

lookup _kern290 {
  pos @RehWawTightenAll <200 0  200 0>;
} _kern290;

lookup _kern_190 {
  pos @RehWawTightenAll <-190 0  -190 0>;
} _kern_190;

lookup _kern_215 {
  pos @RehWawTightenAll <-215 0  -215 0>;
} _kern_215;

lookup _kern_290 {
  pos @RehWawTightenAll <-290 0  -290 0>;
} _kern_290;

lookup _kern_380 {
  pos @RehWawTightenAll <-380 0  -380 0>;
} _kern_380;

lookup _kern_580 {
  pos @RehWawTightenAll <-580 0  -580 0>;
} _kern_580;

lookup _kern_650 {
  pos @RehWawTightenAll <-650 0  -650 0>;
} _kern_650;

lookup RehWawKerning {
ifinfo(styleName, "Bold") {
  pos @WawLike' lookup _kern50                     @RehLikeIsol; 
  pos @WawLike' lookup _kern50 @MarksAny           @RehLikeIsol; 
  pos @WawLike' lookup _kern50 @MarksAny @MarksAny @RehLikeIsol;
}
	ignore pos @RehWawAll                     @RehWawAll;
	ignore pos @RehWawAll @MarksAny           @RehWawAll;
	ignore pos @RehWawAll @MarksAny @MarksAny @RehWawAll;
	
	# Tighten to following gaf-like
ifinfo(styleName, "Bold") {
	pos @RehWawTightenAll' lookup _kern_380                @RehKernGaf ;
	pos @RehWawTightenAll' lookup _kern_380 @_diaB         @RehKernGaf ;
	pos @RehWawTightenAll' lookup _kern_380 @_diaB @_diaB  @RehKernGaf ;
}
ifinfo(styleName, "Regular") {
	pos @RehWawTightenAll' lookup _kern_650                @RehKernGaf ;
	pos @RehWawTightenAll' lookup _kern_650 @_diaB         @RehKernGaf ;
	pos @RehWawTightenAll' lookup _kern_650 @_diaB @_diaB  @RehKernGaf ;
}

	# Loosen from following alef/lam when it has something below it
	pos reh-ar' lookup _kern290                      alefWavyhamzabelow-ar ;
	pos reh-ar' lookup _kern290 @MarksAny            alefWavyhamzabelow-ar ;
	pos reh-ar' lookup _kern290 @MarksAny @MarksAny  alefWavyhamzabelow-ar ;
		
	pos @RehWawAll' lookup _kern215                      @AlefLamWBelow ;
	pos @RehWawAll' lookup _kern215 @MarksAny            @AlefLamWBelow ;
	pos @RehWawAll' lookup _kern215 @MarksAny @MarksAny  @AlefLamWBelow ;
	
	pos @RehWawAll' lookup _kern215                      @AlefIso @_diaB ;
	pos @RehWawAll' lookup _kern215 @MarksAny            @AlefIso @_diaB ;
	pos @RehWawAll' lookup _kern215 @MarksAny @MarksAny  @AlefIso @_diaB ;
	
	# Loosen from following narrow initials with something below:
	pos @RehWawAll' lookup _kern130                      @NarrowIni;
	pos @RehWawAll' lookup _kern130 @MarksAny            @NarrowIni;
	pos @RehWawAll' lookup _kern130 @MarksAny @MarksAny  @NarrowIni;
	
	# Leave certain cases alone:
	ignore pos @RehWawTightenAll                       @RehKernAlefOrOther @_diaB ;                            
	ignore pos @RehWawTightenAll @MarksAny             @RehKernAlefOrOther @_diaB ;                            
	ignore pos @RehWawTightenAll @MarksAny @MarksAny   @RehKernAlefOrOther @_diaB ;
	
	ignore pos @RehWawTightenAll @_diaA               @RehKernOtherMA ;
	ignore pos @RehWawTightenAll @MarksAny @_diaA     @RehKernOtherMA ;
	
	# Otherwise tighten against most things:
	pos @RehWawTightenAll' lookup _kern_190                @RehKernAlef;
	pos @RehWawTightenAll' lookup _kern_190 @_diaB         @RehKernAlef;
	pos @RehWawTightenAll' lookup _kern_190 @_diaB @_diaB  @RehKernAlef;
	
	pos @RehWawTightenAll' lookup _kern_190                      @RehKernMost;
	pos @RehWawTightenAll' lookup _kern_190 @MarksAny            @RehKernMost;
	pos @RehWawTightenAll' lookup _kern_190 @MarksAny @MarksAny  @RehKernMost;
	
	ignore pos @RehWawTightenAll                      @AinLikeInit @_diaB;
	ignore pos @RehWawTightenAll @MarksAny            @AinLikeInit @_diaB;
	ignore pos @RehWawTightenAll @MarksAny @MarksAny  @AinLikeInit @_diaB;
	
	pos @RehWawTighten' lookup _kern_215                      @AinLikeInit;
	pos @RehWawTighten' lookup _kern_215 @MarksAny            @AinLikeInit;
	pos @RehWawTighten' lookup _kern_215 @MarksAny @MarksAny  @AinLikeInit;
	
	pos @RehWawTightenMore' lookup _kern_290                      @AinLikeInit;
	pos @RehWawTightenMore' lookup _kern_290 @MarksAny            @AinLikeInit;
	pos @RehWawTightenMore' lookup _kern_290 @MarksAny @MarksAny  @AinLikeInit;
	
	pos @RehWawNothingBelow' lookup _kern_580                      @AinLikeIsol;
	pos @RehWawNothingBelow' lookup _kern_580 @MarksAny            @AinLikeIsol;
	pos @RehWawNothingBelow' lookup _kern_580 @MarksAny @MarksAny  @AinLikeIsol;
		
} RehWawKerning;

@AlefForms = [alef-ar alef-ar.fina];
@AlefDigit = [alefTwoabove-ar alefThreeabove-ar alefTwoabove-ar.fina alefThreeabove-ar.fina];

lookup MiscKerning {
	lookupflag IgnoreMarks;
		pos @AlefForms' lookup _kern70  rreh-ar;
		
		pos @Tooth1hBelow' lookup _kern100  rehStroke-ar.fina;
		pos @Tooth2hBelow' lookup _kern100  rehStroke-ar.fina;
} MiscKerning;

lookup MiscKerningWDiacs {
	# does not ignore diacritics
		pos @AlefForms' lookup _kern130  madda-ar.small  @GafIsolInit;      # also see shift rules below
		pos @AlefForms' lookup _kern170  madda-ar        @GafIsolInit;
		pos @AlefForms' lookup _kern170  madda-ar        @LamLikeIsolInit;

		pos @Tooth' lookup _kern140  @MarksAbove  rehTwodotshorizontalaboveTahabove-ar.fina;  # also see shift rule below
} MiscKerningWDiacs;


# Note that shifting in RTL works the opposite in OpenType compared to Graphite.

lookup DiacShifting {
	# alef + takhallus (name marker)
	pos @AlefForms  hehgoal-ar.init  takhallusabove-ar' <-350 300  0 0>;
	pos @AlefForms  tehMarbuta-ar    takhallusabove-ar' <   0 150  0 0>;
	pos @AlefForms  @HehLikeIsolate  takhallusabove-ar' <   0 320  0 0>;
ifinfo(styleName, "Bold") {
	pos @AlefDigit  tehMarbuta-ar    takhallusabove-ar' < 550 220  0 0>;  # BOLD
	pos @AlefDigit  @HehLikeIsolate  takhallusabove-ar' < 550 430  0 0>;  # BOLD
}
ifinfo(styleName, "Regular") {
	pos @AlefDigit  tehMarbuta-ar    takhallusabove-ar' < 450 220  0 0>;  # REGULAR
	pos @AlefDigit  @HehLikeIsolate  takhallusabove-ar' < 350 430  0 0>;  # REGULAR
}

	# beh + kasra +jeem/ain/yeh-barree finals
ifinfo(styleName, "Bold") {
	pos @ToothRing  kasra-ar'    <  0   75 0 0>  @YehBarreeFina;  # special case - BOLD
	pos @ToothRing  kasratan-ar' <120 -450 0 0>  @YehBarreeFina;  # special case - BOLD
}
ifinfo(styleName, "Regular") {
	ignore pos @ToothRing  kasra-ar'                @YehBarreeFina;  # okay with yeh-barree - REGULAR
	pos @ToothRing     kasratan-ar' <120  180 0 0>  @YehBarreeFina;  # special case - REGULAR
}
	
ifinfo(styleName, "Bold") {
	pos @Tooth1hBelow  kasra-ar'    <  0 -300 0 0>  @YehBarreeFina;  # BOLD
	pos @Tooth1hBelow  kasratan-ar' <100 -200 0 0>  @YehBarreeFina;  # BOLD
}
ifinfo(styleName, "Regular") {
	pos @Tooth1hBelow  kasra-ar'    <  0  145 0 0>  @YehBarreeFina;  # REGULAR
	pos @Tooth1hBelow  kasratan-ar' <200  290 0 0>  @YehBarreeFina;  # REGULAR
}
	pos @Tooth2hBelow  kasra-ar'    <  0 -200 0 0>  @YehBarreeFina;
	pos @Tooth2hBelow  kasratan-ar' <  0 -100 0 0>  @YehBarreeFina;
	pos @Tooth0Below   kasratan-ar' <  0  150 0 0>  @YehBarreeFina;
	
ifinfo(styleName, "Bold") {
	pos @Tooth1hBelow  kasra-ar'    < 10 -300 0 0>  @JeemAinLikeFina;  # BOLD
}
ifinfo(styleName, "Regular") {
	pos @Tooth1hBelow  kasra-ar'    <120  150 0 0>  @JeemAinLikeFina;  # REGULAR
}
	pos @Tooth1hBelow  kasratan-ar' <100   30 0 0>  @JeemAinLikeFina;
	pos @Tooth2hBelow  kasra-ar'    <  0 -100 0 0>  @JeemAinLikeFina;
	pos @Tooth2hBelow  kasratan-ar' < 50    0 0 0>  @JeemAinLikeFina;
	pos @Tooth0Below   kasratan-ar' <100    0 0 0>  @JeemAinLikeFina;
	
	pos @AlefForms  madda-ar.small' < 20 0 0 0>  @GafIsolInit;  # also see kern rules above
	pos @AlefForms  madda-ar'       < 90 0 0 0>  @GafIsolInit;
	pos @AlefForms  madda-ar'       < 70 0 0 0>  @LamLikeIsolInit;
	
	pos @Tooth  @MarksAbove' < 50 0 0 0>  rehTwodotshorizontalaboveTahabove-ar.fina;  # also see kern rule above
} DiacShifting;

#********
# Kashida kerning for yeh/peh forms, etc.

# When we kern the kashida, we shift it a bit further to the right, just to avoid it hanging too far
# off the left edge of the following glyph. Not really necessary, but a precaution.
# (In Graphite we do this by splitting the kerning between the kashida and the following glyph.)

# Using separate lookups for initial-medial and medial-medial allows us to handle a chain of these.

#lookup _kkern_30 {
#  pos absAutoKashida     <-15 0  -30 0>;
#} _kkern_30;

lookup _kkern_40 {
  pos absAutoKashida     <-20 0  -40 0>;
} _kkern_40;

lookup _kkern_60 {
  pos absAutoKashida     <-30 0  -60 0>;
} _kkern_60;

lookup _kkern_80 {
  pos absAutoKashida     <-40 0  -80 0>;
} _kkern_80;

lookup _kkern_100 {
  pos absAutoKashida     <-50 0  -100 0>;
} _kkern_100;

lookup _kkern_120 {
  pos absAutoKashida     <-60 0  -120 0>;
} _kkern_120;

lookup _kkern_140 {
  pos absAutoKashida     <-70 0  -140 0>;
} _kkern_140;

lookup _kkern_160 {
  pos absAutoKashida     <-80 0  -160 0>;
} _kkern_160;

lookup _kkern_180 {
  pos absAutoKashida     <-90 0  -180 0>;
} _kkern_180;

lookup _kkern_240 {
  pos absAutoKashida     <-120 0  -240 0>;
} _kkern_240;


lookup ToothKashidaKerningIM {
	lookupflag IgnoreMarks;
		ignore pos @Tooth2wwBelowInit absAutoKashida  @Tooth2wwBelowMedi;  # doesn't need kerning
ifinfo(styleName, "Regular") {
		pos @Tooth3wBelowInit  absAutoKashida' lookup _kkern_60   absAutoKashida   @Tooth3wBelowMedi;  # REGULAR ONLY
}
		pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_140  absAutoKashida   @Tooth3wBelowMedi;
		pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_80   @Tooth2wBelowMedi;
		
ifinfo(styleName, "Bold") {
  	pos @Tooth2wBelowMedi absAutoKashida' lookup _kkern_60   @Tooth2wBelowMedi;  # BOLD
		pos @Tooth2wAboveMedi absAutoKashida' lookup _kkern_60   @Tooth2wAboveMedi;  # BOLD
		
		pos @Tooth2wAboveInit'  absAutoKashida' lookup _kkern_100  @FehQaf2wAboveMedi;  # BOLD
		pos @FehQaf2wAboveInit' absAutoKashida' lookup _kkern_60   @FehQaf2wAboveMedi;  # BOLD		
		
		pos teheh-ar.init' lookup _kern100  teheh-ar.medi;
}

} ToothKashidaKerningIM;

lookup ToothKashidaKerningMM {
	lookupflag IgnoreMarks;
ifinfo(styleName, "Regular") {
		pos @Tooth3wBelowMedi  absAutoKashida' lookup _kkern_60   absAutoKashida   @Tooth3wBelowMedi;  # REGULAR ONLY
}
		pos @Tooth2wBelowMedi  absAutoKashida' lookup _kkern_140  absAutoKashida  @Tooth3wBelowMedi;
		
ifinfo(styleName, "Bold") {
		pos @FehQaf2wAboveMedi' absAutoKashida' lookup _kkern_240  @FehQaf2wAboveMedi;  # BOLD		
}

} ToothKashidaKerningMM;

lookup ToothKashidaKerningIMF {
	lookupflag IgnoreMarks;
		pos @Tooth2wBelowInit  absAutoKashida' lookup _kkern_80  @YehLikeFina;
		
		pos @Tooth absAutoKashida' lookup _kkern_100  tehMarbuta-ar.fina;
} ToothKashidaKerningIMF;

lookup MiscKashidaKerning {
	lookupflag IgnoreMarks;
		pos @KafLikeInitMedi   absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
		pos @JeemLikeInitMedi  absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
		pos noon-ar.medi       absAutoKashida' lookup _kkern_120  @RnoonLikeNarrow;
		
		#pos @Tooth2wBelowRstrk      absAutoKashida' lookup _kkern_180  rehStroke-ar.fina; 
} MiscKashidaKerning;


#**********************************
#  FEATURES
#**********************************

#--- Substitution ---

feature init {  # Initial Forms
    script arab;
      lookup ltrInit;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} init ;

feature medi {  # Medial Forms
    script arab;
      lookup ltrMedi;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} medi ;

feature fina {  # Terminal Forms
    script arab;
      lookup ltrFina;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} fina ;

feature ccmp {  # Glyph Composition/Decomposition
		# Same for latin & arabic:
        lookup SmallMaddah;
        lookup FontCheck1;
        lookup FontCheck2;
        lookup ReorderMaddaVowel1;
        lookup ReorderMaddaVowel2;
        
        # According to Amiri font developer Khaled Hosney:
        #    Kashida justification as implemented in most, if not all, applications is
        #    broken by design; it inserts kashidas *after* doing OT layout which makes it
        #    impossible for OT code to interact with those kashidas breaking all sorts of
        #    things.
        #    To trick LibreOffice/MS Office to not do kashida justification we set the
        #    default kashida to a zero width, blank glyph which makes them to think there
        #    is no suitable kashida glyph, resorting back to regular justification
        #    To get manually inserted kashida working we use an rlig feature to map to the
        #    actual kashida glyph(s).
        # See https://github.com/alif-type/amiri/blob/main/sources/kashida.fea
        # Except we do this in ccmp since we don't have curvy kashida glyphs.
        sub kashida-ar by kashida-ar.haswidth ;
            
    script arab;
        lookup DecomposeForColor;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
      
    script latn;
        lookup KasraHigh;
} ccmp ;

feature rtlm {  # Right-To-Left Mirrored Forms
		lookup Mirror;
} rtlm ;

feature rlig {  # Required Ligatures
		# lookup ShaddaKasraLigatures (where needed) has been moved to liga so it runs after cv62
    script arab;
    		lookup AllahLigatures;
        lookup Ligatures;
        lookup ShaddaLigatures;
        #lookup ShaddaKasraLigatures; -- move to liga so it runs after cv62
        lookup ComposeLowHamzaAbove;
        lookup HamzaLigatures;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} rlig ;

feature calt {  # Contextual Alternates
        #lookup SignWithDigits;
        # lookup SignDigits;
        lookup ToothKashidasIM;
        lookup ToothKashidasMM;
        lookup ToothKashidasIMF;
        lookup MiscKashidas;
        lookup MarkKashidas;

      language KUR ; # Kurdish
        lookup KurdishHeh ;
      language RHG ; #Rohingya
        lookup RohingyaCALT ;
      language SND ; # Sindhi
        lookup SindhiCALT ;
      language URD ; # Urdu
        lookup UrduCALT ;
      language WLF ; # Wolof
        lookup WolofCALT ;
      language KIR ; # Kirghiz
      	lookup KirghizCALT ;
} calt ;


feature salt {  # Stylistic Alternates
    script arab;
        lookup AyahAlternates;
      # Force other languages to include Arabic script lookups
      language KIR ;  # Kirghiz
      language KUR ;  # Kurdish
      language RHG ;  # Rohingya
      language SND ;  # Sindhi
      language URD ;  # Urdu
      language WLF ;  # Wolof
} salt ;

#--- Character Variants ---

feature cv12 {  # Character Variant 12
    script arab;
        lookup DalAlternate;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      # language WLF;  -- but not this one since we enable it in the WolofCALT
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Dal"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Alternate" ; };
            } ;
} cv12 ;

# Use meem alternates for languages other than Sindhi
feature cv44 {  # Character Variant 44
    script arab;
        lookup MeemAlternate;
      # Force other languages to include Arabic script lookups
      language URD;  # Urdu
      language KIR;  # Kirghiz
      language KUR;  # Kurdish
      language RHG;  # Rohingya
      # language SND; -- but not this one since we enable it in SindhiCALT
      language WLF;  # Wolof
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Meem"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"; };
    } ;
} cv44 ;

feature cv48 {  # Character Variant 48
    script arab;
      language dflt;  # Default
          lookup HehAlternates;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language SND ;
      language RHG ;
      language URD ;
      language WLF ;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Heh"            ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Urdu-style"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Kurdish-style"  ; };
    } ;
} cv48 ;

#feature cv50 {  # Character Variant 50
#    # Same for latin & arabic:
#    	lookup ArabicUAlternate;
#    cvParameters {
#        FeatUILabelNameID  { name 3 1 0x0409 "Arabic U" ; };
#        ParamUILabelNameID { name 3 1 0x0409 "Standard" ; };
#        ParamUILabelNameID { name 3 1 0x0409 "Filled"   ; };
#    } ;
#} cv50 ;

feature cv51 {  # Character Variant 51
    # Same for latin & arabic:
    	lookup KirghizOeAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Kirghiz OE" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Loop" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Bar"   ; };
    } ;
} cv51 ;

feature cv54 {  # Character Variant 54
    # Same for latin & arabic:
    	lookup YehHamzaAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Yeh-Hamza" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Right hamza"   ; };
    } ;
} cv54 ;

feature cv60 {  # Character Variant 60
		# Same for latin & arabic:
			lookup MaddahAlternate;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Maddah"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Small"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"    ; };
    } ;
} cv60 ;

feature cv62 {  # Character Variant 62
    # Same for latin & arabic:
    	lookup KasraAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Kasra"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Default" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Lowered" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Raised"  ; };
    } ;
} cv62 ;

feature cv70 {  # Character Variant 70
    # Same for latin & arabic:
    	lookup DammaAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Damma"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Default" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Filled"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Short"    ; };
    } ;
} cv70 ;


feature cv72 {  # Character Variant 72
		# Same for latin & arabic:
			lookup DammatanAlternate;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Dammatan" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Six-nine" ; };
    } ;
} cv72 ;

feature cv74 {  # Character Variant 74
		# Same for latin & arabic:
			lookup DammaInvertedAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Inverted Damma" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Default"        ; };
        ParamUILabelNameID { name 3 1 0x0409 "Hollow"         ; };
    } ;
} cv74 ;

feature cv76 {  # Character Variant 76
		# Same for latin & arabic:
			lookup DaggerAlefToLarge;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Superscript Alef" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Small"            ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"            ; };
    } ;
} cv76 ;

feature cv78 {  # Character Variant 78
		# Same for latin & arabic:
			lookup SukunAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Sukun"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Closed"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Open down" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Open left" ; };
    } ;
} cv78 ;

feature cv80 {  # Character Variant 80
		# Same for latin & arabic:
			lookup AyahAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "End of ayah"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified A" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified B" ; };
    } ;
} cv80 ;

feature cv82 {  # Character Variant 82
    # Same for latin & arabic:
      lookup DigitAlternates;  # Latin and Arabic
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Eastern digits" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Standard"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Urdu-style"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Kurdish-style"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Rohingya-style" ; };
    } ;
} cv82 ;

feature cv84 {  # Character Variant 84
		# Same for latin & arabic:
			lookup CommaAlternates;
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Comma"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Upward"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Downward" ; };
    } ;
} cv84 ;

#feature cv90 {  # Character Variant 90
#		lookup JehHack;
#} cv90 ;

#feature cv92 {  # Character Variant 92
#		lookup HeadOfKhahHack;
#} cv92 ;


# In order for the cv62 lookup to function, we need to execute the ShaddaKasraLigatures in the
# same or later pass as cv62 itself, and it has to execute whether or not cv62 feature is requested,
# so it has to be part of some other feature. In Harfbuzz, we could use either clig or liga, since they
# are pulled in from the Horizontal features that follow shaper-specific features and are, therefore
# executed at the same time as cvXX.

# When rendered with Uniscribe or Word, cv62 is never executed [as of this writing, at any rate].
# But we still need the ShaddaKasraLigatures lookup to fire. Presently Microsoft doesn't 
# fire clig, so liga must be the one to use!

feature liga {  # Ligatures  -- we use this because liga is done in the same pass as cv62
    # Same for latin & arabic:
        lookup ShaddaKasraLigatures;
        lookup SignWithDigits;
} liga ;


#--- Positioning ---

feature mark {  # Mark to base Positioning
    # Same for latin & arabic:
        lookup mark_to_base;
        lookup alef_to_base;
    script arab;
####        lookup AlefMark2BelowAfterLam;
####        lookup MarkKern;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} mark ;

#feature mark {  # Mark Positioning
#    script arab;
#        language dflt;  # Default
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language KIR  exclude_dflt;  # Kirghiz
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language KUR  exclude_dflt;  # Kurdish
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language SND  exclude_dflt;  # Sindhi
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#        language URD  exclude_dflt;  # Urdu
#            lookup Marks;
#            lookup MarksBelowTailDown;
#            lookup MarksBelowTailUp;
#            lookup AlefMark2BelowAfterLam;
#    script latn;
#        language dflt;  # Default
#            lookup Marks;
#            lookup AlefMark2BelowAfterLam;
#} mark ;

feature mkmk {  # Mark to mark Positioning
    # Same for latin & arabic:
        lookup mark_to_mark_above;
        lookup mark_to_mark_below;
} mkmk ;


#feature mkmk {  # Mark to Mark Positioning
#    script arab;
#        language dflt;  # Default
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language KIR  exclude_dflt;  # Kirghiz
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language KUR  exclude_dflt;  # Kurdish
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language RHG  exclude_dflt;  # Rohingya
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language SND  exclude_dflt;  # Sindhi
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#        language URD  exclude_dflt;  # Urdu
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#    script latn;
#        language dflt;  # Default
#            lookup MarksToMarkBelow;
#            lookup MarksToMarkAbove;
#} mkmk ;


feature curs {  # Cursive Positioning
    script arab;
      lookup LamAlefConnection;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} curs ;


feature kern {  # Kerning
    # Same behavior for latin & arabic:
        lookup SubtendingMarks;
        lookup RehWawKerning;
        lookup MiscKerning;
        lookup MiscKerningWDiacs;
        lookup DiacShifting;
        lookup ToothKashidaKerningIM;
        lookup ToothKashidaKerningMM;
        lookup ToothKashidaKerningIMF;
        lookup MiscKashidaKerning;
} kern ;


####feature kern {  # Kerning
####    script arab;
####        language dflt;  # Default
####            lookup Reh;
####            lookup SubtendingAyah;
####            lookup Subtending0600;
####            lookup Subtending0601;
####            lookup Subtending0602;
####            lookup Subtending0603;
####            lookup Subtending0604;
####            lookup Subtending0605;
####        language KUR  exclude_dflt;  # Kurdish
####            lookup Reh;
####            lookup Marks;
####            lookup SubtendingAyah;
####            lookup Subtending0600;
####            lookup Subtending0601;
####            lookup Subtending0602;
####            lookup Subtending0603;
####            lookup Subtending0604;
####            lookup Subtending0605;
####        language SND  exclude_dflt;  # Sindhi
####            ...
####        language URD  exclude_dflt;  # Urdu
####            ...
####    script latn;
####        language dflt;  # Default
####            lookup SubtendingAyah;
####            ...
####} kern ;

