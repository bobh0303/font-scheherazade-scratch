#**********************************
# This file is part of Scheherazade font family (http://software.sil.org/scheherazade/) 
# and is Copyright (c) 1994-2022 SIL International (http://www.sil.org/),
# with Reserved Font Names "Scheherazade" and "SIL".
#
# This Font Software is licensed under the SIL Open Font License, Version 1.1.
#
# You should have received a copy of the license along with this Font Software.
# If this is not the case, go to (http://scripts.sil.org/OFL) for all the
# details including an FAQ.
#**********************************


#**********************************
#  Language Systems
#**********************************

languagesystem arab dflt ;
languagesystem arab KIR  ;    # Kyrgyz
languagesystem arab KUR  ;    # Kurdish
languagesystem arab RHG  ;    # Rohingya -- supported by Harfbuzz
languagesystem arab SND  ;    # Sindhi
languagesystem arab URD  ;    # Urdu
languagesystem arab WLF  ;    # Wolof - MMM not in Lateef
languagesystem latn dflt ;

@MarksAbove = [@_diaA] ;
@MarksBelow = [@_diaB] ;
@MarksAny = [@_diaA @_diaB] ;

# Notes:
#   I've tried to arrange the lookups themselves, and then the features that refer to them,
#   grouped into ordered passes as the rendering engines (esp Harfbuzz) will execute them.
#   The boundaries between passes are indicated by the comment 
#       # HB PAUSE
#   in the code.


#**********************************
# GSUB (Subtitution) lookups
#**********************************

#---  rtlm feature  ---

lookup Mirror {
  lookupflag IgnoreMarks ;
    sub @cno_rtl by @c_rtl ;
} Mirror;

# HB PAUSE

#---  ccmp feature  ---

ifinfo(familyName, "Scheherazade New") {

lookup SmallMadda {
  lookupflag 0 ;
    sub @Maddah by @Maddah.small ;
} SmallMadda;

} # Sch

# For full UTR53 stacks, this decomposition will already have been done.
# Howver, as of 2021-09 Harfbuzz does NOT do this See https://github.com/harfbuzz/harfbuzz/issues/3179

lookup DecomposeForColor {
  lookupflag 0 ;		# MMM L has IgnoreMarks
    sub @AlefPlusMark by alef-ar @AlefMark ;
} DecomposeForColor;

#********************
# Font rendering check
#
# The following three lookups change "RenderingUnknown" to "RenderingOpenType"

lookup _FontCheck_Unknow {
  lookupflag IgnoreMarks;
    sub [U n k o w ] by [O p e T y];
} _FontCheck_Unknow;

lookup _FontCheck_n {
  lookupflag IgnoreMarks;
    sub n by p e;
} _FontCheck_n;

lookup FontCheck {
  lookupflag IgnoreMarks ;
    sub [R] e n d e r i n g 
      U' lookup _FontCheck_Unknow 
      n' lookup _FontCheck_Unknow
      k' lookup _FontCheck_Unknow
      n'  
      o' lookup _FontCheck_Unknow 
      w' lookup _FontCheck_Unknow 
      n' lookup _FontCheck_n;
} FontCheck;


# Reordering of madda: moving it beyond any mark with 0 < ccc < 230
#
# If Harfbuzz is rendering, UTR53 will already have been executed, thus the following will do nothing
# Otherwise, we can't do a lot of reordering but we'll move the madda out past vowels
# in a way that is compatible with UTR53.

@MaddaSkip = [ @UTR53_shadda @UTR53_fixedPos @UTR53_alef @UTR53_220MCM @UTR53_220other ] ;

lookup _ReorderMaddaVowel1 {
  lookupflag 0 ;
    sub @MaddaSkip by @MaddaSkip madda-ar.small ;
} _ReorderMaddaVowel1 ;

lookup ReorderMaddaVowel1 {
  lookupflag 0 ;
    sub madda-ar.small @MaddaSkip' lookup _ReorderMaddaVowel1 ;
} ReorderMaddaVowel1;

lookup _ReorderMaddaVowel2 {
  lookupflag 0 ;
    sub madda-ar.small @MaddaSkip by @MaddaSkip ;
} _ReorderMaddaVowel2 ;

lookup ReorderMaddaVowel2 {
  lookupflag 0 ;
    sub madda-ar.small' lookup _ReorderMaddaVowel2  @MaddaSkip madda-ar.small ;
} ReorderMaddaVowel2;


# Replace Arabic punctuation glyphs with Latin ones:
lookup LatinPunctuation {
  lookupflag 0 ;
    sub @cno_latn by @c_latn ;
} LatinPunctuation ;


# Kasra position
lookup KasraLow {
  lookupflag 0 ;
    sub @Kasra by @Kasra_lowered;
} KasraLow;

# HB PAUSE

#---  fina feature  ---

lookup ltrFina {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkFina ;
    sub @RightLinkIsol by  @RightLinkFina ;
} ltrFina;

# HB PAUSE

#---  medi feature  ---

lookup ltrMedi {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkMedi ;
} ltrMedi;

# HB PAUSE

#---  init  feature  ---

lookup ltrInit {
  lookupflag IgnoreMarks ;
    sub @DualLinkIsol  by  @DualLinkInit ;
} ltrInit;

# HB PAUSE

#---  rlig feature  ---

# Allah "ligature" (implemented by variant forms for glyphs rather than by ligature glyph):

lookup _AllahSub_Alef {
    sub @AlefNoAllah  by  @AlefAllah;
} _AllahSub_Alef;

lookup _AllahSub_Lam1 {
    sub @Lam1NoAllah  by  @Lam1Allah;
} _AllahSub_Lam1;

lookup _AllahSub_Lam2 {
    sub lam-ar.medi     by lam-ar.medi.allah2;
} _AllahSub_Lam2;

lookup _AllahSub_Lam2_insertSA {    # insert shadda-alef
  lookupflag 0;
    sub lam-ar.medi  by  lam-ar.medi.allah2  shadda_alef-ar ;
} _AllahSub_Lam2_insertSA;

lookup _AllahSub_Heh {
    sub @HehNoAllah  by  @HehAllah;
} _AllahSub_Heh;

lookup _AllahSub_Shadda_insertA {
    sub shadda-ar     by   shadda_alef-ar;
} _AllahSub_Shadda_insertA;


# Note:
# The shadda-alef ligature is created later in a separate lookup - ShaddaAlefLigatures.
# Also the special form of the alef is created later (except in the case of Rule 3) - lookup AllahAlef -
# in order to allow for the lam-alef ligature exception.

lookup AllahLigatures {
  lookupflag 0;
    # Rule 3: alefIso-lam-lam-heh (no shadda-alef)
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        lam-ar.init'        lookup _AllahSub_Lam1
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny' 
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
    
    #Rule 3b: alefIso-lam-kasra-lam-heh (no shadda-alef)
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        lam-ar.init'        lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    sub @AlefNoAllahIsol'   lookup _AllahSub_Alef
        @MarksAny' 
        @MarksAny'
        lam-ar.init'        lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'        lookup _AllahSub_Lam2_insertSA
        @HehNoAllah'        lookup _AllahSub_Heh;
        
    # Rule 2: lam-lam-shadda-heh
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        lam-ar.medi'             lookup _AllahSub_Lam2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'               lookup _AllahSub_Shadda_insertA
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    # Rule 2b: lam-kasra-lam-shadda-heh
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'
        [alefabove-ar fatha-ar]'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'             lookup _AllahSub_Lam2
        [alefabove-ar fatha-ar]'
        shadda-ar'
        @HehNoAllah'             lookup _AllahSub_Heh;
        
    sub @Lam1NoAllah'            lookup _AllahSub_Lam1
        kasra-ar'
        lam-ar.medi'             lookup _AllahSub_Lam2
        shadda-ar'               lookup _AllahSub_Shadda_insertA
        @HehNoAllah'             lookup _AllahSub_Heh;
        
} AllahLigatures;


# Ligatures of marks

# NB: This includes required ligatures other than the shadda-kasra rule, which
#     must execute after cv67; See notes with feature liga.

# These compositions have to strike a balance between
# trying to do something useful for DirectWrite (which doesn't reorder glyphs) without
# violating the rules of UTR53.

#********
# Hamza ligation

# Include in this filter hamzaAbove plus any mark glyphs that should stop any ligation.
# Mark glyphs not included will be skipped over when trying to find a hamzaAbove
@HamzaAboveFilter = [@UTR53_230MCM @UTR53_230other graphemejoinercomb ] ;

lookup ComposeLowHamzaAbove {
  lookupflag UseMarkFilteringSet @HamzaAboveFilter ;
    sub @LowHamzaBase hamzaabove-ar by @LowHamzaComposed ;
} ComposeLowHamzaAbove;


@LigateHamzaMarksFilter = [ hamzaabove-ar @HamzaMarks ] ;
lookup _LigateHamzaMarks {
  lookupflag UseMarkFilteringSet @LigateHamzaMarksFilter ;
    sub hamzaabove-ar @HamzaMarks by @HamzaLigatures ;
    sub @HamzaMarks hamzaabove-ar by @HamzaLigatures ;
} _LigateHamzaMarks;

@HamzaLigatureFilter = [ @HamzaAboveFilter @HamzaMarks shadda-ar ] ;
lookup HamzaLigatures {
  lookupflag UseMarkFilteringSet @HamzaLigatureFilter ;
    # shouldn't ligate hamza + following fatha|damma when hamza preceded by non-MCM 230 because 
    # UTR53 would have moved the fatha|damma to before the 230 marks but could not move the 
    # hamza as it isn't at the beginning of the 230 sequence.
    ignore sub @UTR53_230other               hamzaabove-ar' ;
    ignore sub @UTR53_230other @UTR53_230MCM hamzaabove-ar' ;
    # shouldn't ligate fatha|damma + following hamza when a 230MCM follows the hamza because
    # UTR53 would have moved both hamza and following 230MCM to before the fatha|damma at which
    # point the 230MCM would be between the hamza and the fatha|damma, blocking ligation.
    ignore sub @HamzaMarks'                  hamzaabove-ar @UTR53_230MCM ;
    ignore sub @HamzaMarks'    @UTR53_230MCM hamzaabove-ar @UTR53_230MCM ;
    # otherwise we can ligate in these situations:
    sub hamzaabove-ar' lookup _LigateHamzaMarks                                                   @HamzaMarks ;
    sub hamzaabove-ar' lookup _LigateHamzaMarks @UTR53_230other                                   @HamzaMarks ;
    sub hamzaabove-ar' lookup _LigateHamzaMarks @UTR53_230other [ @UTR53_230other @UTR53_230MCM ] @HamzaMarks ;
    sub @HamzaMarks'   lookup _LigateHamzaMarks                 hamzaabove-ar ;
    sub @HamzaMarks'   lookup _LigateHamzaMarks @UTR53_230MCM   hamzaabove-ar ;
} HamzaLigatures; 


#********
# Shadda ligation

# Including graphemejoinercomb allows it to interrupt the ligature formation,
#    otherwise the lookupflag causes it to be ignored.
@ShaddaLigatureFilter = [ @ShaddaMarks @ShaddaKasraMarks shadda-ar alefabove-ar graphemejoinercomb ] ;
lookup ShaddaLigatures {
  lookupflag UseMarkFilteringSet @ShaddaLigatureFilter ;
    sub shadda-ar @ShaddaMarks  by  @ShaddaLigatures ;
    sub @ShaddaMarks shadda-ar  by  @ShaddaLigatures ;
} ShaddaLigatures;

# MMM not present in L    \/   \/   \/

# In theory we could do this up where we create the Allah ligature, but this simpler:
lookup ShaddaAlefLigatures {
  lookupflag UseMarkFilteringSet @ShaddaLigatureFilter ;
    sub lam-ar.medi.allah2 shadda-ar' alefabove-ar'  by  shadda_alef-ar;
    sub lam-ar.medi.allah2 alefabove-ar' shadda-ar'  by  shadda_alef-ar;
} ShaddaAlefLigatures;

# HB PAUSE

# MMM L includes shrtail - short-tail variants of reh and waw, but disabled

ifinfo(familyName, "Lateef") {
   
lookup DaggerAlefToLarge {
  lookupflag 0 ;
      sub @TakesLargeDaggerAlef alefabove-ar' by alefabove-ar.large ;   # Lateef
} DaggerAlefToLarge;

}  # Lateef

# HB PAUSE

# Language-independent CALTs

#---  calt feature  ---

#********
# Language-specific shaping

# Note: Setting default kasra is done in ccmp

lookup dfltCALT {		# MMM not present in Lateef
  lookupflag 0 ;
     sub tab by tab;   # Need a dummy lookup for TypeTuner - OBSOLETE???
} dfltCALT;

lookup KurdishCALT {
  lookupflag 0 ;
    sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    sub heh-ar by heh-ar.knotted ;
} KurdishCALT;

lookup KyrgyzCALT {
  lookupflag 0;
    sub @cno_loclKIR  by  @c_loclKIR ;
} KyrgyzCALT;

lookup RohingyaCALT {
  lookupflag 0 ;
    sub four-persian by four-persian.roh ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @cno_sixNine by @c_sixNine ;
    sub @Kasra by @Kasra_lowered ;
} RohingyaCALT  ;

lookup SindhiCALT {
  lookupflag 0 ;
    #sub heh-ar.medi by heh-ar.medi.knottedHigh ; -- done by HehAlternates
    #sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    #sub heh-ar by heh-ar.knotted ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @Meem by @Meem.sindhi ;
    sub @Kasra by @Kasra_lowered;
    sub comma-ar by comma-ar.downward ;
    sub semicolon-ar by semicolon-ar.downward ;
} SindhiCALT;

lookup UrduCALT {
  lookupflag 0 ;
    sub four-persian by four-persian.urdu ;
    sub six-persian by six-persian.urdu ;
    sub seven-persian by seven-persian.urdu ;
    sub @Kasra by @Kasra_lowered;
} UrduCALT;

lookup WolofCALT {
  lookupflag 0 ;
ifinfo(familyName, "Scheherazade New") {
    sub @cno_loclWLF     by  @c_loclWLF ;
    sub @Damma           by  @Damma_short ;
    sub @Kasra           by  @Kasra_lowered ;
    sub dammainverted-ar by  dammainverted-ar.open ;
}  # Sch
} WolofCALT;

# HB PAUSE

# MMM L handles madda above
# The logic of the code is virtually the same. What is the deal with madda-ar.small?

# Lookups for user-selectable features

ifinfo(familyName, "Scheherazade New") {

lookup DalAlternate {
  lookupflag IgnoreMarks ;
    sub @DalIso by @DalIso.sen ;
} DalAlternate;

}  # Sch

# Meem alternate: cv44

lookup MeemAlternate {
  lookupflag IgnoreMarks ;
    sub @cno_sindhi by @c_sindhi;
} MeemAlternate;


# Madda alternate

ifinfo(familyName, "Scheherazade New") {
	 
lookup MaddaAlternate {				# MMM not in L
  lookupflag 0 ;
    sub @Maddah.small by @Maddah ;
} MaddaAlternate;

}  # Sch


#********
# Heh alternates

lookup SindhiHeh {
  lookupflag IgnoreMarks ;		# MMM L does not have IgnoreMarks
  # Used only by TypeTuner
    sub heh-ar.medi by heh-ar.medi.knottedHigh ;
    sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    sub heh-ar by heh-ar.knotted ;
} SindhiHeh;

# heh-hook is no longer defined for Urdu; used only for TypeTuner
lookup UrduHeh {
  lookupflag IgnoreMarks ;		# MMM L does not have IgnoreMarks
    sub heh-ar.init by heh-ar.init.hooked ;
    sub heh-ar.medi by heh-ar.medi.hooked ;
    sub heh-ar.fina by heh-ar.fina.hooked ;
    # In case Lang=Kurdish set:
    sub heh-ar.knotted by heh-ar;
    sub heh-ar.fina.knottedHigh by heh-ar.fina.hooked ;
} UrduHeh;

lookup KurdishHeh {
  lookupflag IgnoreMarks ;		# MMM L does not have IgnoreMarks
  # Used only by TypeTuner
    sub heh-ar.fina by heh-ar.fina.knottedHigh ;
    sub heh-ar by heh-ar.knotted ;
} KurdishHeh;

lookup HehAlternates {
  lookupflag IgnoreMarks ;
    #   0=default;              1=Sindhi;                        2=Urdu;             3=Kurdish
    sub heh-ar                  from [ heh-ar.knotted            heh-ar              heh-ar.knotted ] ;
    sub heh-ar.init             from [ heh-ar.init               heh-ar.init.hooked  heh-ar.init ] ;
    sub heh-ar.medi             from [ heh-ar.medi.knottedHigh   heh-ar.medi.hooked  heh-ar.medi ] ;
    sub heh-ar.fina             from [ heh-ar.fina.knottedHigh   heh-ar.fina.hooked  heh-ar.fina.knottedHigh ] ;
    # In case Kurdish lang has been selected:
    sub heh-ar.knotted          from   [ heh-ar.knotted          heh-ar              heh-ar.knotted          ] ;
    sub heh-ar.fina.knottedHigh from   [ heh-ar.fina.knottedHigh heh-ar.fina.hooked  heh-ar.fina.knottedHigh ] ;
} HehAlternates;


lookup KyrgyzOeAlternates {		# cv51
  lookupflag 0;
    sub @cno_bar  by  @c_bar;
} KyrgyzOeAlternates;


lookup YehHamzaAlternates {			# cv54
  lookupflag 0;
    sub yehHamzaabove-ar       by  yehHamzaabove-ar.loclKIR;
    #sub yehHamzaabove-ar.init  by  yehHamzaabove-ar.init.loclKIR;
    #sub yehHamzaabove-ar.medi  by  yehHamzaabove-ar.medi.loclKIR;
    sub yehHamzaabove-ar.fina  by  yehHamzaabove-ar.fina.loclKIR;
} YehHamzaAlternates;


# MMM missing from L  \/   \/   \/
###lookup KasraHigh {
###  lookupflag 0 ;
###    sub @Kasra_lowered by @Kasra;
###} KasraHigh;


lookup KasraAlternates {			# cv62
  lookupflag 0 ;
    # NB: This is writen so it doesn't matter which shadda-kasra behavior is default.
    #   0=default (raised)    1=lowered       2=raised
    sub @Kasra_lowered from [ @Kasra_lowered  @Kasra ];
    sub @Kasra         from [ @Kasra_lowered  @Kasra ];
} KasraAlternates;

lookup DammaAlternates {			# cv70
  lookupflag 0 ;
    sub @Damma        from [ @Damma_filled  @Damma_short ];
    sub @Damma_filled from [ @Damma_filled  @Damma_short ];
    sub @Damma_short  from [ @Damma_filled  @Damma_short ];
} DammaAlternates;

lookup DammatanAlternate {		# cv72
  lookupflag 0 ;
    sub @Dammatan by @Dammatan.sixNine ;
} DammatanAlternate;

lookup DammaInvertedAlternates {
  lookupflag 0 ;
ifinfo(familyName, "Scheherazade New") {
    #   0=default (filled);        1=hollow;                2=filled
    sub @DammaInvertedAll      from [ @DammaInvertedOpen  @DammaInverted ];
    #sub dammainverted-ar.open from [ dammainverted-ar.open  dammainverted-ar ];
}
} DammaInvertedAlternates;


# MMM Different in Lateef
#       \/   \/   \/
lookup _DaggerAlefAlt {
  lookupflag 0 ;
    # 0=default;            1=large;            2=small
    sub alefabove-ar from [ alefabove-ar.large  alefabove-ar ];
    #sub alefabove-ar by alefabove-ar.large ;
} _DaggerAlefAlt ;

lookup DaggerAlefAlternates {   # cv76
  lookupflag 0 ;
	  # By this time, we've already changed to alefabove-ar.large in contexts where it might be wanted (eg, in Sch).
	  # Now return it to small if cv76=2.
    sub @TakesLargeDaggerAlef alefabove-ar' lookup _DaggerAlefAlt ;
} DaggerAlefAlternates;


lookup SukunAlternates {			# cv78
  lookupflag 0 ;
    sub sukun-ar from [ sukun-ar.downOpen sukun-ar.leftOpen ] ;
} SukunAlternates;


lookup AyahAlternates {  # cv80 - salt feature
  lookupflag 0 ;
    sub @Ayah from [ @AyahCircle  @AyahSquare ] ;
} AyahAlternates;


ifinfo(familyName, "Scheherazade New") {

lookup HonLigAlternates {			# cv81
  lookupflag 0;
    sub @HonLigCall from @HonLigSmpl ;
} HonLigAlternates;

}  # Sch


#********
# Digit alternates

# TypeTuner lookups:

lookup DigitSindhi {
  lookupflag 0;
    sub four-persian.urdu   by four-persian;
    sub four-persian.roh    by four-persian;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitSindhi;

lookup DigitUrdu {
  lookupflag 0;
    sub four-persian        by four-persian.urdu;
    sub four-persian.roh    by four-persian.urdu;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitUrdu;

lookup DigitKurdish {
  lookupflag 0;
    sub four-persian.urdu   by four-persian;
    sub four-persian.roh    by four-persian;
    sub six-persian.urdu    by six-persian;
    sub seven-persian.urdu  by seven-persian;
} DigitKurdish;

lookup DigitRohingya {
    sub four-persian        by four-persian.roh;
    sub four-persian.urdu   by four-persian.roh;
    sub six-persian         by six-persian.urdu;
    sub seven-persian       by seven-persian.urdu;
} DigitRohingya;

# Only used for cv82, not language-specific modifications:
# We include the Kurdish forms as a place holder for value 3, even though they are not offered as a supported value.
# They are simply the standard Persian forms.
lookup DigitAlternates {
  lookupflag 0 ;        #        1 = Sindhi-style     2 = Urdu-style       3 = Kurdish-style   4 = Rohingya-style
    sub four-persian       from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub four-persian.urdu  from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub four-persian.roh   from [four-persian         four-persian.urdu    four-persian        four-persian.roh  ];
    sub six-persian        from [six-persian.urdu     six-persian.urdu     six-persian         six-persian.urdu  ];
    sub six-persian.urdu   from [six-persian.urdu     six-persian.urdu     six-persian         six-persian.urdu  ];
    sub seven-persian      from [seven-persian.urdu   seven-persian.urdu   seven-persian       seven-persian.urdu];
    sub seven-persian.urdu from [seven-persian.urdu   seven-persian.urdu   seven-persian       seven-persian.urdu];
} DigitAlternates;

lookup CommaAlternates {				# cv84
  lookupflag IgnoreMarks ;
    sub @cno_downward by @c_downward;
} CommaAlternates;

lookup DecimalSepAlternate {		# cv85
  lookupflag IgnoreMarks ;
		sub @cno_slash by @c_slash;
} DecimalSepAlternate;


#---  liga feature  ---

#********
# Shadda+kasra handling

# MMM lookupflag is different in L, but logically equivalent.
# MMM Lateef does not handle graphemejoinercomb, but otherwise I think the code can be
# made more like Lateef. The ShaddaLigatureParts class seems overly generous/flexible.
lookup ShaddaKasraLigatures {
  lookupflag MarkAttachmentType @ShaddaLigatureParts;
    sub @ShaddaKasraMarks                    shadda-ar  by  @ShaddaKasraLigatures ;
    sub @ShaddaKasraMarks graphemejoinercomb shadda-ar  by  @ShaddaKasraLigatures ;
    sub shadda-ar                    @ShaddaKasraMarks  by  @ShaddaKasraLigatures ;
    sub shadda-ar graphemejoinercomb @ShaddaKasraMarks  by  @ShaddaKasraLigatures ;
} ShaddaKasraLigatures;


#********
# Lam-Alef Ligatures

# =====  obsolete  =====
lookup _LamAlefLig_Part1 {
  lookupflag IgnoreMarks ;
    sub @LamIni by @LamIniPreAlef ;
    sub @LamMed by @LamMedPreAlef ;
} _LamAlefLig_Part1 ;

lookup _LamAlefLig_Part2a {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinPostLamIni ;
} _LamAlefLig_Part2a ;

lookup _LamAlefLig_Part2b {
  lookupflag IgnoreMarks ;
    sub @AlefFin by @AlefFinPostLamMed ;
} _LamAlefLig_Part2b ;

lookup LamAlefLigatures_OLD {
  lookupflag IgnoreMarks ;
  # Subtable: Ligatures\Part1
    sub [ @LamIni @LamMed ]' lookup _LamAlefLig_Part1 @AlefFin ;
  # Subtable: Ligatures\Part2a
    sub @LamIniPreAlef @AlefFin' lookup _LamAlefLig_Part2a ;
  # Subtable: Ligatures\Part2b
    sub @LamMedPreAlef @AlefFin' lookup _LamAlefLig_Part2b ;
} LamAlefLigatures_OLD;
# ======================

# MMM L does not handle rare ligatures (AlefRareNoLig)
lookup LamAlefLigatures {
  lookupflag IgnoreMarks ;
    sub @LamNoLig   alef-ar.fina                by  @LamAlefLig ;
    sub @LamNoLig   alefWasla-ar.fina           by  @LamAlefWaslaLig ;
    sub @LamNoLig   alefWavyhamzaabove-ar.fina  by  @LamAlefWavyHAboveLig ;
    sub @LamNoLig   alefWavyhamzabelow-ar.fina  by  @LamAlefWavyHBelowLig ;
    sub @LamNoLig   alefTwoabove-ar.fina        by  @LamAlefTwoAboveLig ;
    sub @LamNoLig   alefThreeabove-ar.fina      by  @LamAlefThreeAboveLig ;
    
    sub lam-ar      @AlefRareNoLig              by  @LamAlefRareLig ;
    sub lam-ar.fina @AlefRareNoLig              by  @LamAlefRareLigFina ;
} LamAlefLigatures;


# Must be after LamAlefLigatures
lookup AllahAlef {  # clean up: make sure alef is correct form for Allah
  lookupflag IgnoreMarks;
    sub @AlefNoAllah'  lam-ar.init.allah1  by  @AlefAllah;
} AllahAlef;


#********
# Subtending mark digits

# Keep after cv82 (DigitAlternates)

lookup SignWith_4digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_4 by @c_4 ;
} SignWith_4digits_target ;

lookup SignWith_3digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_3 by @c_3 ;
} SignWith_3digits_target ;

lookup SignWith_2digits_target {
  lookupflag IgnoreMarks ;
    sub @cno_2 by @c_2 ;
} SignWith_2digits_target ;

lookup SignDigits_ToMedium_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnyMedium ;
} SignDigits_ToMedium_target ;

lookup SignDigits_ToSmall_target {
  lookupflag IgnoreMarks ;
    sub @DigitsAny by @DigitsAnySmall ;
} SignDigits_ToSmall_target ;

# MMM L does not include poundmarkabove or piastremarkabove or disputedendofayah

# Keep after cv82, so that the right digit alternates are already selected by now:
lookup SignWithDigits {
  lookupflag IgnoreMarks ;
  # Uniscribe or HarfBuzz 'latn'
    sub [ year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_4digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ number-ar year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_3digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ endofayah-ar endofayah-ar.alt endofayah-ar.altB disputedendofayah-ar]' lookup SignWith_3digits_target 
        @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target ;
    sub [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar  poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_2digits_target 
        @DigitsAny' lookup SignDigits_ToMedium_target  @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]
        @DigitsAny' lookup SignDigits_ToMedium_target ;
    sub [ disputedendofayah-ar ]' lookup SignWith_2digits_target
        @DigitsAny' lookup SignDigits_ToSmall_target   @DigitsAny' lookup SignDigits_ToSmall_target;
    sub [ disputedendofayah-ar ]
        @DigitsAny' lookup SignDigits_ToSmall_target;
  # HarfBuzz 'arab'
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_4digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar ]' lookup SignWith_3digits_target ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target  
        [ endofayah-ar endofayah-ar.alt endofayah-ar.altB disputedendofayah-ar]' lookup SignWith_3digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ]' lookup SignWith_2digits_target ;
    sub @DigitsAny' lookup SignDigits_ToMedium_target 
        [ number-ar year-ar samvat-ar footnotemarker-ar pagenumber-ar numbermark-ar poundmarkabove-ar piastremarkabove-ar endofayah-ar endofayah-ar.alt endofayah-ar.altB ] ;
    sub @DigitsAny' lookup SignDigits_ToSmall_target  @DigitsAny' lookup SignDigits_ToSmall_target
        [ disputedendofayah-ar ]'  lookup SignWith_2digits_target;
    sub @DigitsAny' lookup SignDigits_ToSmall_target
        [ disputedendofayah-ar ];
} SignWithDigits;


# Lateef only
ifinfo(familyName, "Lateef") {
   
# Proportional Figures: pnum

lookup ProportionalFigures {
  lookupflag IgnoreMarks ;
    sub @cno_pnum by @c_pnum ;
} ProportionalFigures ;

# Tabular Figures: tnum

lookup TabularFigures {
  lookupflag IgnoreMarks ;
    sub @cno_tnum by @c_tnum ;
} TabularFigures ;

}  # Lateef


include(../../source/opentype/customCollisionSubs.feax); 


# Scheherazade only:
lookup WideKashida {
ifinfo(familyName, "Scheherazade New") {
  sub kashida-ar'  @MarksAny  by  kashida-ar.wide;
}
} WideKashida;


#**********************************
#  GSUB FEATURES
#**********************************

# As best as I understand, these are arranged in the order MS & HB engines execute:


feature rtlm {  # Right-To-Left Mirrored Forms
    lookup Mirror;
} rtlm ;

# HB PAUSE

feature ccmp {  # Glyph Composition/Decomposition
    # Same for latin & arabic:
        # DecomposeForColor executes here for Arabic
        lookup SmallMadda;
        lookup FontCheck;
        lookup ReorderMaddaVowel1;
        lookup ReorderMaddaVowel2;
    script latn;
        lookup LatinPunctuation;           
    script arab;
        lookup DecomposeForColor;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG  ;
        lookup KasraLow ;
      language SND  ;
        lookup KasraLow ;
      language URD  ;
        lookup KasraLow ;
      language WLF  ;
        lookup KasraLow ;
      
###    script latn;
###        lookup KasraHigh;  #### why is this needed for latn?
} ccmp ;

# feature locl (not used)

# HB PAUSE

feature fina {  # Terminal Forms
    script arab;
      	lookup ltrFina;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} fina ;

# HB PAUSE

feature medi {  # Medial Forms
    script arab;
      	lookup ltrMedi;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} medi ;

# HB PAUSE

feature init {  # Initial Forms
    script arab;
      	lookup ltrInit;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} init ;

# HB PAUSE

# MMM shadda + kasra is handled differently in Lateef

feature rlig {  # Required Ligatures
    # lookup ShaddaKasraLigatures (where needed) has been moved to liga so it runs after cv62
    script arab;
        lookup AllahLigatures;
        #lookup LamAlefLigatures; -- move to liga to go after ShaddaKasraLigatures
        lookup ComposeLowHamzaAbove;
        lookup HamzaLigatures;
        lookup ShaddaLigatures;
        lookup ShaddaAlefLigatures;
        #lookup ShaddaKasraLigatures; -- move to liga so it runs after cv62
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      language WLF ;
} rlig ;

# HB PAUSE

# NB: We use calt for language-specific alternates rather than locl because
#     the heh localizations don't affect all forms of heh so we need the lookups
#     to execute after init/medi/fina lookups, but locl executes before.

feature calt {  # Contextual Alternates
    script arab;
        #lookup SignWithDigits;  # moved to liga feature
ifinfo(familyName, "Lateef") {
        lookup DaggerAlefToLarge;
##      lookup ShortTailRehWaw ;   Lateef only; short-tail reh/waw variants disabled for now
}

# Sch only:        
do let f = info("familyName");
   if f.find("Scherherazade") != -1 and opt("nokern") != "yes"; {
     # start of kerning substitutions
        lookup ToothKashidasIM;
        lookup ToothKashidasMM;
        lookup ToothKashidasIMF;
        lookup MiscKashidas;
        lookup MarkKashidas;
}   # end of kerning substitutions

        lookup WideKashida;

      language dflt ;   # Must have a lookup here for TypeTuner to work. - MMM not in L
        lookup dfltCALT ;     		# OBSOLETE???
      language KIR ; # Kyrgyz
        lookup KyrgyzCALT ;
      language KUR ; # Kurdish
        lookup KurdishCALT ;
      language RHG ; #Rohingya
        lookup RohingyaCALT ;
      language SND ; # Sindhi
        lookup SindhiCALT ;
      language URD ; # Urdu
        lookup UrduCALT ;
      language WLF ; # Wolof
        lookup WolofCALT ;
} calt ;

# feature rclt

# HB PAUSE

# HB puts everything else (clig, liga, cvXX, ssXX, salt) in one pass:

feature salt {  # Stylistic Alternates
    script arab;
        lookup AyahAlternates;
      # Force other languages to include Arabic script lookups
      language KIR ;  # Kyrgyz
      language KUR ;  # Kurdish
      language RHG ;  # Rohingya
      language SND ;  # Sindhi
      language URD ;  # Urdu
      language WLF ;  # Wolof
} salt ;

#--- Character Variants ---

do let f = info("familyName");
   if f.find("Scheherazade New") != -1; {

feature cv12 {  # Character Variant 12 - Scheherazade only
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Dal"       ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Alternate" ; };
    } ;
    script arab;
        lookup DalAlternate;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language RHG ;
      language SND ;
      language URD ;
      # language WLF;  -- but not this one since we enable it in the WolofCALT
} cv12 ;

}  # end do - Sch

# Use meem alternates for languages other than Sindhi
feature cv44 {  # Character Variant 44
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Meem"       ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"; };
    } ;
    script arab;
        lookup MeemAlternate;
      # Force other languages to include Arabic script lookups
      language KIR;  # Kyrgyz
      language KUR;  # Kurdish
      language RHG;  # Rohingya
      # language SND; -- but not this one since we enable it in SindhiCALT
      language URD;  # Urdu
      language WLF;  # Wolof
} cv44 ;


feature cv48 {  # Character Variant 48
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Heh"            ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Urdu-style"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Kurdish-style"  ; };
    } ;
    script arab;
      language dflt;  # Default
          lookup HehAlternates;
      # Force other languages to include Arabic script lookups
      language KIR ;
      language KUR ;
      language SND ;
      language RHG ;
      language URD ;
      language WLF ;
} cv48 ;


feature cv51 {  # Character Variant 51
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Kyrgyz OE" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Loop"      ; };
        ParamUILabelNameID { name 3 1 0x0409 "Bar"       ; };
    } ;
    script arab;  # Arabic
        lookup KyrgyzOeAlternates;
      # Force other languages to include Arabic script lookups
      language KIR  ;
      language KUR  ;
      language KUR  ;
      language SND  ;
      language RHG  ;
      language URD  ;
      language WLF  ;
} cv51 ;


feature cv54 {  # Character Variant 54
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Yeh-Hamza"   ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Right hamza" ; };
    } ;
    script arab;  # Arabic
     lookup YehHamzaAlternates;
     # Force other languages to include Arabic script lookups
     language KIR  ;
     language KUR  ;
     language KUR  ;
     language SND  ;
     language RHG  ;
     language URD  ;
     language WLF  ;
} cv54 ;


# Character Variant 60

do let f = info("familyName");
   if f.find("Scheherazade New") != -1; {
   
feature cv60 {  # Character Variant 60
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Maddah"   ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Small"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"    ; };
    } ;
    # Same for latin & arabic:
      lookup MaddaAlternate;
} cv60 ;

}   # end - Sch


feature cv62 {  
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Kasra"   ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Default" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Lowered" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Raised"  ; };
    } ;
    # Same for latin & arabic:
      lookup KasraAlternates;
} cv62 ;


# Character variants 70

do let f = info("familyName");
	 if f.find("Scheherazade New") != -1; {
	 
feature cv70 {
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Damma"    ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Default" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Filled"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Short"    ; };   # MMM not present in L
    } ;
    # Same for latin & arabic:
      lookup DammaAlternates;
} cv70 ;

}  # end do - Sch

do let f = info("familyName");
	 if f.find("Lateef") != -1; {
	 
feature cv70 {
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Damma"    ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Short" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Filled"   ; };
    } ;
    # Same for latin & arabic:
      lookup DammaAlternates;
} cv70 ;

}  # end do - Lateef


feature cv72 {  # Character Variant 72
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Dammatan" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Six-nine" ; };
    } ;
    # Same for latin & arabic:
      lookup DammatanAlternate;
    # Except Rohingya where it is already set to sixNine
    script arab ;
      language RHG exclude_dflt ;    # MMM added to Sch
} cv72 ;


# Character Variant 74

do let f = info("familyName");
   if f.find("Scheherazade New") != -1; {
   
feature cv74 {
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Inverted Damma" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Default"        ; };
        ParamUILabelNameID { name 3 1 0x0409 "Hollow"         ; };
    } ;
    # Same for latin & arabic:
      lookup DammaInvertedAlternates;
} cv74 ;

}  # end - Sch


# Character Variant 76

do let f = info("familyName");
	 if f.find("Lateef") != -1; {

feature cv76 {  
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Superscript Alef" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Small"            ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"            ; }; 
    } ;

    # Same for latin & arabic:
        lookup DaggerAlefAlternates;
} cv76 ;

}   # end do - Sch


do let f = info("familyName");
	 if f.find("Lateef") != -1; {

feature cv76 {  
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Superscript Alef" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Default"          ; };
        ParamUILabelNameID { name 3 1 0x0409 "Large"            ; };
        ParamUILabelNameID { name 3 1 0x0409 "Small"            ; };
    } ;

    # Same for latin & arabic:
        lookup DaggerAlefAlternates;
} cv76 ;

}  # end do - Lateef


feature cv78 {  # Character Variant 78
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Sukun"     ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Closed"    ; };
        ParamUILabelNameID { name 3 1 0x0409 "Open down" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Open left" ; };
    } ;
    # Same for latin & arabic:
      lookup SukunAlternates;
} cv78 ;


feature cv80 {  # Character Variant 80
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "End of ayah"  ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified A" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified B" ; };
    } ;
    # Same for latin & arabic:
      lookup AyahAlternates;
} cv80 ;


# Character variable cv81

do let f = info("familyName");
	 if f.find("Scheherazade New") != -1; {

feature cv81 {  # Character Variant 81
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Honorific ligatures" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Calligraphic" ; };
        ParamUILabelNameID { name 3 1 0x0409 "Simplified" ; };
    } ;
    # Same for latin and arabic:
      lookup HonLigAlternates;
} cv81 ;

}  # end do - Sch


feature cv82 {  # Character Variant 82
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Eastern digits" ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Standard"       ; };
        ParamUILabelNameID { name 3 1 0x0409 "Sindhi-style"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Urdu-style"     ; };
        ParamUILabelNameID { name 3 1 0x0409 "Kurdish-style"  ; };
        ParamUILabelNameID { name 3 1 0x0409 "Rohingya-style" ; };
    } ;
    # Same for latin & arabic:
      lookup DigitAlternates;  # Latin and Arabic
} cv82 ;


feature cv84 {  # Character Variant 84
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Comma"    ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Upward"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Downward" ; };
    } ;
    # Same for latin & arabic:
      lookup CommaAlternates;
} cv84 ;


feature cv85 {  # Character Variant 85
    cvParameters {
        FeatUILabelNameID  { name 3 1 0x0409 "Decmal separator"    ; };
    ### ParamUILabelNameID { name 3 1 0x0409 "Small reh"   ; };
        ParamUILabelNameID { name 3 1 0x0409 "Slash" ; };
    } ;
    # Same for latin & arabic:
      lookup DecimalSepAlternate;
} cv85 ;


# In order for the cv62 lookup to function, we need to execute the ShaddaKasraLigatures in the
# same or later pass as cv62 itself, and it has to execute whether or not cv62 feature is requested,
# so it has to be part of some other feature. In Harfbuzz, we could use either clig or liga, since they
# are pulled in from the Horizontal features that follow shaper-specific features and are, therefore
# executed at the same time as cvXX.

# When rendered with Uniscribe or Word, cv62 is never executed [as of this writing, at any rate].
# But we still need the ShaddaKasraLigatures lookup to fire. Presently Microsoft doesn't 
# fire clig, so liga must be the one to use!

# Finally, the LamAlefLigatures must execute after we've ligated mark combinations, including shadda-kasra,
# or otherwise Word gets confused and ligates shadda-kasra in a sequence such as lam-shadda-alef-kasra.

feature liga {  # Ligatures  -- we use this because liga is done in the same pass as cv62
    # Same for latin & arabic:
        lookup ShaddaKasraLigatures;     # Must be after language-specific CALTs and cv62
    #   lookup YehBarreeToWideAlways;    # Lateef - Must execute after language-specific CALTs and cv48
    #   lookup YehBarreeToWideWithMarks; # Lateef - Must execute after language-specific CALTs and cv48
        lookup SignWithDigits;
        lookup LamAlefLigatures;         # Must be after all mark ligatures (including cv62)
        lookup AllahAlef;                # Must be after lam-alef lig
} liga ;


# Lateef only:

do let f = info("familyName");
   if f.find("Lateef") != -1; {
   
feature tnum {  # Tabular figures
    # default for latin, select for arabic:
    lookup TabularFigures ;            # must execute after SignWithDigits
} tnum ;

feature pnum {  # Proportional figures
    # default for arabic, select for latin:
    lookup ProportionalFigures ;       # must execute after SignWithDigits
} pnum ;
   
}  # end of do - Lateef
